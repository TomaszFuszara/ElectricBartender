
Electronic_bartender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004278  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004430  08004430  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08004430  08004430  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004430  08004430  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08004438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  200000b0  080044e8  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080044e8  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c84a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ba  00000000  00000000  0002c922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002eae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  0002f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012b2d  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001160e  00000000  00000000  00042e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e4a7  00000000  00000000  00054423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c28ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003014  00000000  00000000  000c291c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000b0 	.word	0x200000b0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004320 	.word	0x08004320

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000b4 	.word	0x200000b4
 8000104:	08004320 	.word	0x08004320

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b08b      	sub	sp, #44	; 0x2c
 8000238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023a:	2414      	movs	r4, #20
 800023c:	193b      	adds	r3, r7, r4
 800023e:	0018      	movs	r0, r3
 8000240:	2314      	movs	r3, #20
 8000242:	001a      	movs	r2, r3
 8000244:	2100      	movs	r1, #0
 8000246:	f003 fbf9 	bl	8003a3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800024a:	4b4c      	ldr	r3, [pc, #304]	; (800037c <MX_GPIO_Init+0x148>)
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	4b4b      	ldr	r3, [pc, #300]	; (800037c <MX_GPIO_Init+0x148>)
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	0309      	lsls	r1, r1, #12
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	4b48      	ldr	r3, [pc, #288]	; (800037c <MX_GPIO_Init+0x148>)
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	031b      	lsls	r3, r3, #12
 8000260:	4013      	ands	r3, r2
 8000262:	613b      	str	r3, [r7, #16]
 8000264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000266:	4b45      	ldr	r3, [pc, #276]	; (800037c <MX_GPIO_Init+0x148>)
 8000268:	695a      	ldr	r2, [r3, #20]
 800026a:	4b44      	ldr	r3, [pc, #272]	; (800037c <MX_GPIO_Init+0x148>)
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	03c9      	lsls	r1, r1, #15
 8000270:	430a      	orrs	r2, r1
 8000272:	615a      	str	r2, [r3, #20]
 8000274:	4b41      	ldr	r3, [pc, #260]	; (800037c <MX_GPIO_Init+0x148>)
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	03db      	lsls	r3, r3, #15
 800027c:	4013      	ands	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000282:	4b3e      	ldr	r3, [pc, #248]	; (800037c <MX_GPIO_Init+0x148>)
 8000284:	695a      	ldr	r2, [r3, #20]
 8000286:	4b3d      	ldr	r3, [pc, #244]	; (800037c <MX_GPIO_Init+0x148>)
 8000288:	2180      	movs	r1, #128	; 0x80
 800028a:	0289      	lsls	r1, r1, #10
 800028c:	430a      	orrs	r2, r1
 800028e:	615a      	str	r2, [r3, #20]
 8000290:	4b3a      	ldr	r3, [pc, #232]	; (800037c <MX_GPIO_Init+0x148>)
 8000292:	695a      	ldr	r2, [r3, #20]
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	029b      	lsls	r3, r3, #10
 8000298:	4013      	ands	r3, r2
 800029a:	60bb      	str	r3, [r7, #8]
 800029c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029e:	4b37      	ldr	r3, [pc, #220]	; (800037c <MX_GPIO_Init+0x148>)
 80002a0:	695a      	ldr	r2, [r3, #20]
 80002a2:	4b36      	ldr	r3, [pc, #216]	; (800037c <MX_GPIO_Init+0x148>)
 80002a4:	2180      	movs	r1, #128	; 0x80
 80002a6:	02c9      	lsls	r1, r1, #11
 80002a8:	430a      	orrs	r2, r1
 80002aa:	615a      	str	r2, [r3, #20]
 80002ac:	4b33      	ldr	r3, [pc, #204]	; (800037c <MX_GPIO_Init+0x148>)
 80002ae:	695a      	ldr	r2, [r3, #20]
 80002b0:	2380      	movs	r3, #128	; 0x80
 80002b2:	02db      	lsls	r3, r3, #11
 80002b4:	4013      	ands	r3, r2
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|Zawor_napoj_Pin, GPIO_PIN_RESET);
 80002ba:	23c0      	movs	r3, #192	; 0xc0
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	4830      	ldr	r0, [pc, #192]	; (8000380 <MX_GPIO_Init+0x14c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	0019      	movs	r1, r3
 80002c4:	f001 f9af 	bl	8001626 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Zawor_alkohol_GPIO_Port, Zawor_alkohol_Pin, GPIO_PIN_RESET);
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	0059      	lsls	r1, r3, #1
 80002cc:	2390      	movs	r3, #144	; 0x90
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2200      	movs	r2, #0
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 f9a7 	bl	8001626 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	2290      	movs	r2, #144	; 0x90
 80002e2:	0352      	lsls	r2, r2, #13
 80002e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2200      	movs	r2, #0
 80002ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ec:	193a      	adds	r2, r7, r4
 80002ee:	2390      	movs	r3, #144	; 0x90
 80002f0:	05db      	lsls	r3, r3, #23
 80002f2:	0011      	movs	r1, r2
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 f809 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD4_Pin|Zawor_napoj_Pin;
 80002fa:	0021      	movs	r1, r4
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	22c0      	movs	r2, #192	; 0xc0
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000304:	000c      	movs	r4, r1
 8000306:	193b      	adds	r3, r7, r4
 8000308:	2201      	movs	r2, #1
 800030a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	193b      	adds	r3, r7, r4
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	193b      	adds	r3, r7, r4
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000318:	193b      	adds	r3, r7, r4
 800031a:	4a19      	ldr	r2, [pc, #100]	; (8000380 <MX_GPIO_Init+0x14c>)
 800031c:	0019      	movs	r1, r3
 800031e:	0010      	movs	r0, r2
 8000320:	f000 fff4 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Zawor_alkohol_Pin;
 8000324:	0021      	movs	r1, r4
 8000326:	187b      	adds	r3, r7, r1
 8000328:	2280      	movs	r2, #128	; 0x80
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	000c      	movs	r4, r1
 8000330:	193b      	adds	r3, r7, r4
 8000332:	2201      	movs	r2, #1
 8000334:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	193b      	adds	r3, r7, r4
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033c:	193b      	adds	r3, r7, r4
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Zawor_alkohol_GPIO_Port, &GPIO_InitStruct);
 8000342:	193a      	adds	r2, r7, r4
 8000344:	2390      	movs	r3, #144	; 0x90
 8000346:	05db      	lsls	r3, r3, #23
 8000348:	0011      	movs	r1, r2
 800034a:	0018      	movs	r0, r3
 800034c:	f000 ffde 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Przycisk3_Pin|Przycisk2_Pin|Przycisk1_Pin;
 8000350:	0021      	movs	r1, r4
 8000352:	187b      	adds	r3, r7, r1
 8000354:	22e0      	movs	r2, #224	; 0xe0
 8000356:	0152      	lsls	r2, r2, #5
 8000358:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2201      	movs	r2, #1
 8000364:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000366:	187b      	adds	r3, r7, r1
 8000368:	4a05      	ldr	r2, [pc, #20]	; (8000380 <MX_GPIO_Init+0x14c>)
 800036a:	0019      	movs	r1, r3
 800036c:	0010      	movs	r0, r2
 800036e:	f000 ffcd 	bl	800130c <HAL_GPIO_Init>

}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b00b      	add	sp, #44	; 0x2c
 8000378:	bd90      	pop	{r4, r7, pc}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	40021000 	.word	0x40021000
 8000380:	48000800 	.word	0x48000800

08000384 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <MX_I2C1_Init+0x74>)
 800038a:	4a1c      	ldr	r2, [pc, #112]	; (80003fc <MX_I2C1_Init+0x78>)
 800038c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800038e:	4b1a      	ldr	r3, [pc, #104]	; (80003f8 <MX_I2C1_Init+0x74>)
 8000390:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <MX_I2C1_Init+0x7c>)
 8000392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <MX_I2C1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039a:	4b17      	ldr	r3, [pc, #92]	; (80003f8 <MX_I2C1_Init+0x74>)
 800039c:	2201      	movs	r2, #1
 800039e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003a6:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f001 f94d 	bl	8001660 <HAL_I2C_Init>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ca:	f000 fc4c 	bl	8000c66 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003d0:	2100      	movs	r1, #0
 80003d2:	0018      	movs	r0, r3
 80003d4:	f001 fd16 	bl	8001e04 <HAL_I2CEx_ConfigAnalogFilter>
 80003d8:	1e03      	subs	r3, r0, #0
 80003da:	d001      	beq.n	80003e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003dc:	f000 fc43 	bl	8000c66 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <MX_I2C1_Init+0x74>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fd59 	bl	8001e9c <HAL_I2CEx_ConfigDigitalFilter>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003ee:	f000 fc3a 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200000cc 	.word	0x200000cc
 80003fc:	40005400 	.word	0x40005400
 8000400:	0000020b 	.word	0x0000020b

08000404 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b08b      	sub	sp, #44	; 0x2c
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	2414      	movs	r4, #20
 800040e:	193b      	adds	r3, r7, r4
 8000410:	0018      	movs	r0, r3
 8000412:	2314      	movs	r3, #20
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f003 fb10 	bl	8003a3c <memset>
  if(i2cHandle->Instance==I2C1)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <HAL_I2C_MspInit+0x90>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d131      	bne.n	800048a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <HAL_I2C_MspInit+0x94>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <HAL_I2C_MspInit+0x94>)
 800042c:	2180      	movs	r1, #128	; 0x80
 800042e:	02c9      	lsls	r1, r1, #11
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <HAL_I2C_MspInit+0x94>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	02db      	lsls	r3, r3, #11
 800043c:	4013      	ands	r3, r2
 800043e:	613b      	str	r3, [r7, #16]
 8000440:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000442:	0021      	movs	r1, r4
 8000444:	187b      	adds	r3, r7, r1
 8000446:	22c0      	movs	r2, #192	; 0xc0
 8000448:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2212      	movs	r2, #18
 800044e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2203      	movs	r2, #3
 800045a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2201      	movs	r2, #1
 8000460:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000462:	187b      	adds	r3, r7, r1
 8000464:	4a0d      	ldr	r2, [pc, #52]	; (800049c <HAL_I2C_MspInit+0x98>)
 8000466:	0019      	movs	r1, r3
 8000468:	0010      	movs	r0, r2
 800046a:	f000 ff4f 	bl	800130c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <HAL_I2C_MspInit+0x94>)
 8000470:	69da      	ldr	r2, [r3, #28]
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <HAL_I2C_MspInit+0x94>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	0389      	lsls	r1, r1, #14
 8000478:	430a      	orrs	r2, r1
 800047a:	61da      	str	r2, [r3, #28]
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HAL_I2C_MspInit+0x94>)
 800047e:	69da      	ldr	r2, [r3, #28]
 8000480:	2380      	movs	r3, #128	; 0x80
 8000482:	039b      	lsls	r3, r3, #14
 8000484:	4013      	ands	r3, r2
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b00b      	add	sp, #44	; 0x2c
 8000490:	bd90      	pop	{r4, r7, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	40005400 	.word	0x40005400
 8000498:	40021000 	.word	0x40021000
 800049c:	48000400 	.word	0x48000400

080004a0 <lcd_init>:
#include "lcd_chars.h"
#include "stm32f0xx_hal.h"
#include "i2c.h"

void lcd_init(struct lcd_disp * lcd)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80004a8:	210f      	movs	r1, #15
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]
	/* set backlight */
	if(lcd->bl)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2223      	movs	r2, #35	; 0x23
 80004b4:	5c9b      	ldrb	r3, [r3, r2]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d002      	beq.n	80004c0 <lcd_init+0x20>
	{
		xpin = BL_PIN;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2208      	movs	r2, #8
 80004be:	701a      	strb	r2, [r3, #0]
	}

	/* init sequence */
	HAL_Delay(40);
 80004c0:	2028      	movs	r0, #40	; 0x28
 80004c2:	f000 fe21 	bl	8001108 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	7818      	ldrb	r0, [r3, #0]
 80004ca:	240f      	movs	r4, #15
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	001a      	movs	r2, r3
 80004d2:	2130      	movs	r1, #48	; 0x30
 80004d4:	f000 f834 	bl	8000540 <lcd_write>
	HAL_Delay(5);
 80004d8:	2005      	movs	r0, #5
 80004da:	f000 fe15 	bl	8001108 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	001a      	movs	r2, r3
 80004e8:	2130      	movs	r1, #48	; 0x30
 80004ea:	f000 f829 	bl	8000540 <lcd_write>
	HAL_Delay(1);
 80004ee:	2001      	movs	r0, #1
 80004f0:	f000 fe0a 	bl	8001108 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	7818      	ldrb	r0, [r3, #0]
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	001a      	movs	r2, r3
 80004fe:	2130      	movs	r1, #48	; 0x30
 8000500:	f000 f81e 	bl	8000540 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	7818      	ldrb	r0, [r3, #0]
 8000508:	193b      	adds	r3, r7, r4
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	001a      	movs	r2, r3
 800050e:	2102      	movs	r1, #2
 8000510:	f000 f816 	bl	8000540 <lcd_write>
	HAL_Delay(5);
 8000514:	2005      	movs	r0, #5
 8000516:	f000 fdf7 	bl	8001108 <HAL_Delay>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	193b      	adds	r3, r7, r4
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	001a      	movs	r2, r3
 8000524:	210c      	movs	r1, #12
 8000526:	f000 f80b 	bl	8000540 <lcd_write>
	HAL_Delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f000 fdec 	bl	8001108 <HAL_Delay>

	/* clear */
	lcd_clear(lcd);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	0018      	movs	r0, r3
 8000534:	f000 f8e2 	bl	80006fc <lcd_clear>


}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b005      	add	sp, #20
 800053e:	bd90      	pop	{r4, r7, pc}

08000540 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b087      	sub	sp, #28
 8000544:	af02      	add	r7, sp, #8
 8000546:	0004      	movs	r4, r0
 8000548:	0008      	movs	r0, r1
 800054a:	0011      	movs	r1, r2
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	1c22      	adds	r2, r4, #0
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	1dbb      	adds	r3, r7, #6
 8000554:	1c02      	adds	r2, r0, #0
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	1d7b      	adds	r3, r7, #5
 800055a:	1c0a      	adds	r2, r1, #0
 800055c:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	220f      	movs	r2, #15
 8000564:	4393      	bics	r3, r2
 8000566:	b2da      	uxtb	r2, r3
 8000568:	1d7b      	adds	r3, r7, #5
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4313      	orrs	r3, r2
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2204      	movs	r2, #4
 8000572:	4313      	orrs	r3, r2
 8000574:	b2da      	uxtb	r2, r3
 8000576:	210c      	movs	r1, #12
 8000578:	187b      	adds	r3, r7, r1
 800057a:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (data & 0xF0) | xpin;
 800057c:	1dbb      	adds	r3, r7, #6
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b25b      	sxtb	r3, r3
 8000582:	220f      	movs	r2, #15
 8000584:	4393      	bics	r3, r2
 8000586:	b25a      	sxtb	r2, r3
 8000588:	1d7b      	adds	r3, r7, #5
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b25b      	sxtb	r3, r3
 800058e:	4313      	orrs	r3, r2
 8000590:	b25b      	sxtb	r3, r3
 8000592:	b2da      	uxtb	r2, r3
 8000594:	187b      	adds	r3, r7, r1
 8000596:	705a      	strb	r2, [r3, #1]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000598:	1dbb      	adds	r3, r7, #6
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	011b      	lsls	r3, r3, #4
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	1d7b      	adds	r3, r7, #5
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2204      	movs	r2, #4
 80005aa:	4313      	orrs	r3, r2
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	709a      	strb	r2, [r3, #2]
	tx_data[3] = (data << 4) | xpin;
 80005b2:	1dbb      	adds	r3, r7, #6
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	b25a      	sxtb	r2, r3
 80005ba:	1d7b      	adds	r3, r7, #5
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b25b      	sxtb	r3, r3
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	0008      	movs	r0, r1
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	70da      	strb	r2, [r3, #3]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b299      	uxth	r1, r3
 80005d2:	183a      	adds	r2, r7, r0
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <lcd_write+0xa8>)
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	9300      	str	r3, [sp, #0]
 80005da:	2304      	movs	r3, #4
 80005dc:	f001 f8d6 	bl	800178c <HAL_I2C_Master_Transmit>
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b005      	add	sp, #20
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	200000cc 	.word	0x200000cc

080005ec <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 80005f4:	210f      	movs	r1, #15
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
 80005fc:	230e      	movs	r3, #14
 80005fe:	18fb      	adds	r3, r7, r3
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
	char ch;

	/* set backlight */
	if(lcd->bl)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2223      	movs	r2, #35	; 0x23
 8000608:	5c9b      	ldrb	r3, [r3, r2]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d002      	beq.n	8000614 <lcd_display+0x28>
	{
		xpin = BL_PIN;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2208      	movs	r2, #8
 8000612:	701a      	strb	r2, [r3, #0]
	}

	//lcd_clear(lcd);

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	7818      	ldrb	r0, [r3, #0]
 8000618:	230f      	movs	r3, #15
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	001a      	movs	r2, r3
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	f7ff ff8d 	bl	8000540 <lcd_write>
	while(ch = lcd->f_line[i])
 8000626:	e01f      	b.n	8000668 <lcd_display+0x7c>
	{
		if (ch < 9)
 8000628:	210d      	movs	r1, #13
 800062a:	187b      	adds	r3, r7, r1
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d804      	bhi.n	800063c <lcd_display+0x50>
		{
			ch--;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	781a      	ldrb	r2, [r3, #0]
 8000636:	187b      	adds	r3, r7, r1
 8000638:	3a01      	subs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
		}
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7818      	ldrb	r0, [r3, #0]
 8000640:	240e      	movs	r4, #14
 8000642:	193b      	adds	r3, r7, r4
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	18d3      	adds	r3, r2, r3
 800064a:	7859      	ldrb	r1, [r3, #1]
 800064c:	230f      	movs	r3, #15
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2201      	movs	r2, #1
 8000654:	4313      	orrs	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	001a      	movs	r2, r3
 800065a:	f7ff ff71 	bl	8000540 <lcd_write>
		i++;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	193b      	adds	r3, r7, r4
 8000664:	3201      	adds	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
	while(ch = lcd->f_line[i])
 8000668:	200e      	movs	r0, #14
 800066a:	183b      	adds	r3, r7, r0
 800066c:	781a      	ldrb	r2, [r3, #0]
 800066e:	240d      	movs	r4, #13
 8000670:	193b      	adds	r3, r7, r4
 8000672:	6879      	ldr	r1, [r7, #4]
 8000674:	188a      	adds	r2, r1, r2
 8000676:	7852      	ldrb	r2, [r2, #1]
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	193b      	adds	r3, r7, r4
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1d2      	bne.n	8000628 <lcd_display+0x3c>
	}

	/* send second line data */
	i = 0;
 8000682:	183b      	adds	r3, r7, r0
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7818      	ldrb	r0, [r3, #0]
 800068c:	230f      	movs	r3, #15
 800068e:	18fb      	adds	r3, r7, r3
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	001a      	movs	r2, r3
 8000694:	21c0      	movs	r1, #192	; 0xc0
 8000696:	f7ff ff53 	bl	8000540 <lcd_write>
	while(ch = lcd->s_line[i])
 800069a:	e01d      	b.n	80006d8 <lcd_display+0xec>
	{
		if (ch < 9)
 800069c:	210d      	movs	r1, #13
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b08      	cmp	r3, #8
 80006a4:	d804      	bhi.n	80006b0 <lcd_display+0xc4>
		{
			ch--;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	3a01      	subs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
		}
		lcd_write(lcd->addr, ch, (xpin | RS_PIN));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7818      	ldrb	r0, [r3, #0]
 80006b4:	230f      	movs	r3, #15
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2201      	movs	r2, #1
 80006bc:	4313      	orrs	r3, r2
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	230d      	movs	r3, #13
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	0019      	movs	r1, r3
 80006c8:	f7ff ff3a 	bl	8000540 <lcd_write>
		i++;
 80006cc:	210e      	movs	r1, #14
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	3201      	adds	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
	while(ch = lcd->s_line[i])
 80006d8:	230e      	movs	r3, #14
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	200d      	movs	r0, #13
 80006e0:	183b      	adds	r3, r7, r0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	188a      	adds	r2, r1, r2
 80006e6:	7c92      	ldrb	r2, [r2, #18]
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	183b      	adds	r3, r7, r0
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1d4      	bne.n	800069c <lcd_display+0xb0>
	}
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46c0      	nop			; (mov r8, r8)
 80006f6:	46bd      	mov	sp, r7
 80006f8:	b005      	add	sp, #20
 80006fa:	bd90      	pop	{r4, r7, pc}

080006fc <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000704:	210f      	movs	r1, #15
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]

	/* set backlight */
	if(lcd->bl)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2223      	movs	r2, #35	; 0x23
 8000710:	5c9b      	ldrb	r3, [r3, r2]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d002      	beq.n	800071c <lcd_clear+0x20>
	{
		xpin = BL_PIN;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2208      	movs	r2, #8
 800071a:	701a      	strb	r2, [r3, #0]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7818      	ldrb	r0, [r3, #0]
 8000720:	230f      	movs	r3, #15
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	001a      	movs	r2, r3
 8000728:	2101      	movs	r1, #1
 800072a:	f7ff ff09 	bl	8000540 <lcd_write>
	HAL_Delay(2);
 800072e:	2002      	movs	r0, #2
 8000730:	f000 fcea 	bl	8001108 <HAL_Delay>
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b004      	add	sp, #16
 800073a:	bd80      	pop	{r7, pc}

0800073c <lcd_prog>:


void lcd_prog(struct lcd_disp * lcd)
{
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i, j;
 8000744:	210f      	movs	r1, #15
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]

	/* set backlight */
	if(lcd->bl)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2223      	movs	r2, #35	; 0x23
 8000750:	5c9b      	ldrb	r3, [r3, r2]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <lcd_prog+0x20>
	{
		xpin = BL_PIN;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2208      	movs	r2, #8
 800075a:	701a      	strb	r2, [r3, #0]
	}

	/* send 8 custom chars */
	lcd_write(lcd->addr, (CG_FIRST_CHAR), xpin);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	7818      	ldrb	r0, [r3, #0]
 8000760:	230f      	movs	r3, #15
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	001a      	movs	r2, r3
 8000768:	2140      	movs	r1, #64	; 0x40
 800076a:	f7ff fee9 	bl	8000540 <lcd_write>
	for(i = 0; i <= 7; i++)
 800076e:	230e      	movs	r3, #14
 8000770:	18fb      	adds	r3, r7, r3
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e029      	b.n	80007cc <lcd_prog+0x90>
	{
		for(j = 0; j <= 7; j ++)
 8000778:	230d      	movs	r3, #13
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
 8000780:	e019      	b.n	80007b6 <lcd_prog+0x7a>
		{
			lcd_write(lcd->addr, (user_chars[i][j]), (xpin | RS_PIN));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7818      	ldrb	r0, [r3, #0]
 8000786:	230e      	movs	r3, #14
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	240d      	movs	r4, #13
 800078e:	193b      	adds	r3, r7, r4
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4913      	ldr	r1, [pc, #76]	; (80007e0 <lcd_prog+0xa4>)
 8000794:	00d2      	lsls	r2, r2, #3
 8000796:	188a      	adds	r2, r1, r2
 8000798:	5cd1      	ldrb	r1, [r2, r3]
 800079a:	230f      	movs	r3, #15
 800079c:	18fb      	adds	r3, r7, r3
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2201      	movs	r2, #1
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	001a      	movs	r2, r3
 80007a8:	f7ff feca 	bl	8000540 <lcd_write>
		for(j = 0; j <= 7; j ++)
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	3201      	adds	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	230d      	movs	r3, #13
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d9e0      	bls.n	8000782 <lcd_prog+0x46>
	for(i = 0; i <= 7; i++)
 80007c0:	210e      	movs	r1, #14
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	3201      	adds	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	230e      	movs	r3, #14
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b07      	cmp	r3, #7
 80007d4:	d9d0      	bls.n	8000778 <lcd_prog+0x3c>
		}
	}
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b005      	add	sp, #20
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	20000000 	.word	0x20000000

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f000 fc29 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f9d9 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f7ff fd1f 	bl	8000234 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007f6:	f7ff fdc5 	bl	8000384 <MX_I2C1_Init>
  MX_TIM1_Init();
 80007fa:	f000 fad1 	bl	8000da0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  disp.addr = (0x27 << 1);
 80007fe:	4bda      	ldr	r3, [pc, #872]	; (8000b68 <main+0x384>)
 8000800:	224e      	movs	r2, #78	; 0x4e
 8000802:	701a      	strb	r2, [r3, #0]
  disp.bl = true; //Podświelenie załączone
 8000804:	4bd8      	ldr	r3, [pc, #864]	; (8000b68 <main+0x384>)
 8000806:	2223      	movs	r2, #35	; 0x23
 8000808:	2101      	movs	r1, #1
 800080a:	5499      	strb	r1, [r3, r2]
  lcd_init(&disp);
 800080c:	4bd6      	ldr	r3, [pc, #856]	; (8000b68 <main+0x384>)
 800080e:	0018      	movs	r0, r3
 8000810:	f7ff fe46 	bl	80004a0 <lcd_init>
  lcd_prog(&disp);
 8000814:	4bd4      	ldr	r3, [pc, #848]	; (8000b68 <main+0x384>)
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff ff90 	bl	800073c <lcd_prog>
  lcd_display(&disp);
 800081c:	4bd2      	ldr	r3, [pc, #840]	; (8000b68 <main+0x384>)
 800081e:	0018      	movs	r0, r3
 8000820:	f7ff fee4 	bl	80005ec <lcd_display>

  int ekran = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  int liczba_szklanek = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  int alkohol = 1;
 800082c:	2301      	movs	r3, #1
 800082e:	61fb      	str	r3, [r7, #28]
  int napoj = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  int zmiana = 1;
 8000834:	2301      	movs	r3, #1
 8000836:	613b      	str	r3, [r7, #16]
  int procedura = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
  int pozycja = 500;
 800083c:	23fa      	movs	r3, #250	; 0xfa
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	617b      	str	r3, [r7, #20]
  int zmiana_pozycji = 400;
 8000842:	23c8      	movs	r3, #200	; 0xc8
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
  int czas_otwarcia = 1900;
 8000848:	4bc8      	ldr	r3, [pc, #800]	; (8000b6c <main+0x388>)
 800084a:	607b      	str	r3, [r7, #4]

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800084c:	4bc8      	ldr	r3, [pc, #800]	; (8000b70 <main+0x38c>)
 800084e:	2108      	movs	r1, #8
 8000850:	0018      	movs	r0, r3
 8000852:	f002 f933 	bl	8002abc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(Zawor_alkohol_GPIO_Port, Zawor_alkohol_Pin, GPIO_PIN_SET);
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	0059      	lsls	r1, r3, #1
 800085a:	2390      	movs	r3, #144	; 0x90
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2201      	movs	r2, #1
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fee0 	bl	8001626 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(Zawor_napoj_GPIO_Port, Zawor_napoj_Pin, GPIO_PIN_SET);
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	48c2      	ldr	r0, [pc, #776]	; (8000b74 <main+0x390>)
 800086c:	2201      	movs	r2, #1
 800086e:	0019      	movs	r1, r3
 8000870:	f000 fed9 	bl	8001626 <HAL_GPIO_WritePin>

	  if(HAL_GPIO_ReadPin(Przycisk1_GPIO_Port, Przycisk1_Pin) == GPIO_PIN_RESET){
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	015b      	lsls	r3, r3, #5
 8000878:	4abe      	ldr	r2, [pc, #760]	; (8000b74 <main+0x390>)
 800087a:	0019      	movs	r1, r3
 800087c:	0010      	movs	r0, r2
 800087e:	f000 feb5 	bl	80015ec <HAL_GPIO_ReadPin>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d106      	bne.n	8000894 <main+0xb0>
	  		HAL_Delay(200);
 8000886:	20c8      	movs	r0, #200	; 0xc8
 8000888:	f000 fc3e 	bl	8001108 <HAL_Delay>
	  		ekran = ekran+zmiana;
 800088c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	18d3      	adds	r3, r2, r3
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
	  	  }

	  switch(ekran){
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	2b04      	cmp	r3, #4
 8000898:	d100      	bne.n	800089c <main+0xb8>
 800089a:	e0d7      	b.n	8000a4c <main+0x268>
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2b04      	cmp	r3, #4
 80008a0:	dcd9      	bgt.n	8000856 <main+0x72>
 80008a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d100      	bne.n	80008aa <main+0xc6>
 80008a8:	e08c      	b.n	80009c4 <main+0x1e0>
 80008aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	dcd2      	bgt.n	8000856 <main+0x72>
 80008b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d003      	beq.n	80008be <main+0xda>
 80008b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d03f      	beq.n	800093c <main+0x158>
 80008bc:	e152      	b.n	8000b64 <main+0x380>
	  case 0:
		  sprintf((char *)disp.f_line, "Liczba szklanek:");
 80008be:	4aae      	ldr	r2, [pc, #696]	; (8000b78 <main+0x394>)
 80008c0:	4bae      	ldr	r3, [pc, #696]	; (8000b7c <main+0x398>)
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f003 f8c1 	bl	8003a4c <siprintf>
		  lcd_display(&disp);
 80008ca:	4ba7      	ldr	r3, [pc, #668]	; (8000b68 <main+0x384>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff fe8d 	bl	80005ec <lcd_display>
		  if(HAL_GPIO_ReadPin(Przycisk2_GPIO_Port, Przycisk2_Pin) == GPIO_PIN_RESET){
 80008d2:	2380      	movs	r3, #128	; 0x80
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	4aa7      	ldr	r2, [pc, #668]	; (8000b74 <main+0x390>)
 80008d8:	0019      	movs	r1, r3
 80008da:	0010      	movs	r0, r2
 80008dc:	f000 fe86 	bl	80015ec <HAL_GPIO_ReadPin>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d10b      	bne.n	80008fc <main+0x118>
		  	  		HAL_Delay(200);
 80008e4:	20c8      	movs	r0, #200	; 0xc8
 80008e6:	f000 fc0f 	bl	8001108 <HAL_Delay>
		  	  		liczba_szklanek = liczba_szklanek+zmiana;
 80008ea:	6a3a      	ldr	r2, [r7, #32]
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	18d3      	adds	r3, r2, r3
 80008f0:	623b      	str	r3, [r7, #32]
		  	  		if(liczba_szklanek >= 5){
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	dd01      	ble.n	80008fc <main+0x118>
		  	  		liczba_szklanek = 5;
 80008f8:	2305      	movs	r3, #5
 80008fa:	623b      	str	r3, [r7, #32]
		  	  		}
		  	  	  }
		  if(HAL_GPIO_ReadPin(Przycisk3_GPIO_Port, Przycisk3_Pin) == GPIO_PIN_RESET){
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	4a9c      	ldr	r2, [pc, #624]	; (8000b74 <main+0x390>)
 8000902:	0019      	movs	r1, r3
 8000904:	0010      	movs	r0, r2
 8000906:	f000 fe71 	bl	80015ec <HAL_GPIO_ReadPin>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d10b      	bne.n	8000926 <main+0x142>
		  		  	  		HAL_Delay(200);
 800090e:	20c8      	movs	r0, #200	; 0xc8
 8000910:	f000 fbfa 	bl	8001108 <HAL_Delay>
		  		  	  		liczba_szklanek = liczba_szklanek - zmiana;
 8000914:	6a3a      	ldr	r2, [r7, #32]
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	623b      	str	r3, [r7, #32]
		  		  	  		if(liczba_szklanek <= 1){
 800091c:	6a3b      	ldr	r3, [r7, #32]
 800091e:	2b01      	cmp	r3, #1
 8000920:	dc01      	bgt.n	8000926 <main+0x142>
		  		  	  		liczba_szklanek = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
		  		  	  		}
		  		  	  	  }
		  sprintf((char *)disp.s_line, "%d", liczba_szklanek);
 8000926:	6a3a      	ldr	r2, [r7, #32]
 8000928:	4995      	ldr	r1, [pc, #596]	; (8000b80 <main+0x39c>)
 800092a:	4b96      	ldr	r3, [pc, #600]	; (8000b84 <main+0x3a0>)
 800092c:	0018      	movs	r0, r3
 800092e:	f003 f88d 	bl	8003a4c <siprintf>
		  	  		  lcd_display(&disp);
 8000932:	4b8d      	ldr	r3, [pc, #564]	; (8000b68 <main+0x384>)
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fe59 	bl	80005ec <lcd_display>
		  break;
 800093a:	e113      	b.n	8000b64 <main+0x380>

	  case 1:
	  		  sprintf((char *)disp.f_line, "Ilo%c%c alkoholu: ", '\x6', '\x1');
 800093c:	4992      	ldr	r1, [pc, #584]	; (8000b88 <main+0x3a4>)
 800093e:	488f      	ldr	r0, [pc, #572]	; (8000b7c <main+0x398>)
 8000940:	2301      	movs	r3, #1
 8000942:	2206      	movs	r2, #6
 8000944:	f003 f882 	bl	8003a4c <siprintf>
	  		  lcd_display(&disp);
 8000948:	4b87      	ldr	r3, [pc, #540]	; (8000b68 <main+0x384>)
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff fe4e 	bl	80005ec <lcd_display>
	  		  if(HAL_GPIO_ReadPin(Przycisk2_GPIO_Port, Przycisk2_Pin) == GPIO_PIN_RESET){
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	4a87      	ldr	r2, [pc, #540]	; (8000b74 <main+0x390>)
 8000956:	0019      	movs	r1, r3
 8000958:	0010      	movs	r0, r2
 800095a:	f000 fe47 	bl	80015ec <HAL_GPIO_ReadPin>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d10b      	bne.n	800097a <main+0x196>
	  		  	  		HAL_Delay(200);
 8000962:	20c8      	movs	r0, #200	; 0xc8
 8000964:	f000 fbd0 	bl	8001108 <HAL_Delay>
	  		  	  	alkohol = alkohol+zmiana;
 8000968:	69fa      	ldr	r2, [r7, #28]
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	61fb      	str	r3, [r7, #28]
	  		  	  		if(alkohol >= 10){
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	2b09      	cmp	r3, #9
 8000974:	dd01      	ble.n	800097a <main+0x196>
	  		  	  		alkohol = 10;
 8000976:	230a      	movs	r3, #10
 8000978:	61fb      	str	r3, [r7, #28]
	  		  	  		}
	  		  	  	  }
	  		  if(HAL_GPIO_ReadPin(Przycisk3_GPIO_Port, Przycisk3_Pin) == GPIO_PIN_RESET){
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	4a7d      	ldr	r2, [pc, #500]	; (8000b74 <main+0x390>)
 8000980:	0019      	movs	r1, r3
 8000982:	0010      	movs	r0, r2
 8000984:	f000 fe32 	bl	80015ec <HAL_GPIO_ReadPin>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d10b      	bne.n	80009a4 <main+0x1c0>
	  		  		  	  		HAL_Delay(200);
 800098c:	20c8      	movs	r0, #200	; 0xc8
 800098e:	f000 fbbb 	bl	8001108 <HAL_Delay>
	  		  		  	  alkohol = alkohol - zmiana;
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	61fb      	str	r3, [r7, #28]
	  		  		  	  		if(alkohol <= 1){
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	2b01      	cmp	r3, #1
 800099e:	dc01      	bgt.n	80009a4 <main+0x1c0>
	  		  		  	  	alkohol = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	61fb      	str	r3, [r7, #28]
	  		  		  	  		}
	  		  		  	  	  }
	  		  sprintf((char *)disp.s_line, "%d ml ", alkohol*10);
 80009a4:	69fa      	ldr	r2, [r7, #28]
 80009a6:	0013      	movs	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	189b      	adds	r3, r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	001a      	movs	r2, r3
 80009b0:	4976      	ldr	r1, [pc, #472]	; (8000b8c <main+0x3a8>)
 80009b2:	4b74      	ldr	r3, [pc, #464]	; (8000b84 <main+0x3a0>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f003 f849 	bl	8003a4c <siprintf>
	  		  	  		  lcd_display(&disp);
 80009ba:	4b6b      	ldr	r3, [pc, #428]	; (8000b68 <main+0x384>)
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff fe15 	bl	80005ec <lcd_display>
	  		  break;
 80009c2:	e0cf      	b.n	8000b64 <main+0x380>

	  case 2:
	  	  		  sprintf((char *)disp.f_line, "Ilo%c%c napoju:   ", '\x6', '\x1');
 80009c4:	4972      	ldr	r1, [pc, #456]	; (8000b90 <main+0x3ac>)
 80009c6:	486d      	ldr	r0, [pc, #436]	; (8000b7c <main+0x398>)
 80009c8:	2301      	movs	r3, #1
 80009ca:	2206      	movs	r2, #6
 80009cc:	f003 f83e 	bl	8003a4c <siprintf>
	  	  		  lcd_display(&disp);
 80009d0:	4b65      	ldr	r3, [pc, #404]	; (8000b68 <main+0x384>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fe0a 	bl	80005ec <lcd_display>
	  	  		  if(HAL_GPIO_ReadPin(Przycisk2_GPIO_Port, Przycisk2_Pin) == GPIO_PIN_RESET){
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	011b      	lsls	r3, r3, #4
 80009dc:	4a65      	ldr	r2, [pc, #404]	; (8000b74 <main+0x390>)
 80009de:	0019      	movs	r1, r3
 80009e0:	0010      	movs	r0, r2
 80009e2:	f000 fe03 	bl	80015ec <HAL_GPIO_ReadPin>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d10b      	bne.n	8000a02 <main+0x21e>
	  	  		  	  		HAL_Delay(200);
 80009ea:	20c8      	movs	r0, #200	; 0xc8
 80009ec:	f000 fb8c 	bl	8001108 <HAL_Delay>
	  	  		  	  napoj = napoj + zmiana;
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	18d3      	adds	r3, r2, r3
 80009f6:	61bb      	str	r3, [r7, #24]
	  	  		  	  		if(napoj >= 10){
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	2b09      	cmp	r3, #9
 80009fc:	dd01      	ble.n	8000a02 <main+0x21e>
	  	  		  	  		napoj = 10;
 80009fe:	230a      	movs	r3, #10
 8000a00:	61bb      	str	r3, [r7, #24]
	  	  		  	  		}
	  	  		  	  	  }
	  	  		  if(HAL_GPIO_ReadPin(Przycisk3_GPIO_Port, Przycisk3_Pin) == GPIO_PIN_RESET){
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	4a5b      	ldr	r2, [pc, #364]	; (8000b74 <main+0x390>)
 8000a08:	0019      	movs	r1, r3
 8000a0a:	0010      	movs	r0, r2
 8000a0c:	f000 fdee 	bl	80015ec <HAL_GPIO_ReadPin>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d10b      	bne.n	8000a2c <main+0x248>
	  	  		  		  	  		HAL_Delay(200);
 8000a14:	20c8      	movs	r0, #200	; 0xc8
 8000a16:	f000 fb77 	bl	8001108 <HAL_Delay>
	  	  		  		  	  napoj = napoj - zmiana;
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	61bb      	str	r3, [r7, #24]
	  	  		  		  	  		if(napoj <= 1){
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	dc01      	bgt.n	8000a2c <main+0x248>
	  	  		  		  	  	napoj = 1;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
	  	  		  		  	  		}
	  	  		  		  	  	  }
	  	  		  sprintf((char *)disp.s_line, "%d ml ", napoj*10);
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	0013      	movs	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	189b      	adds	r3, r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	001a      	movs	r2, r3
 8000a38:	4954      	ldr	r1, [pc, #336]	; (8000b8c <main+0x3a8>)
 8000a3a:	4b52      	ldr	r3, [pc, #328]	; (8000b84 <main+0x3a0>)
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f003 f805 	bl	8003a4c <siprintf>
	  	  		  	  		  lcd_display(&disp);
 8000a42:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <main+0x384>)
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fdd1 	bl	80005ec <lcd_display>
	  	  		  break;
 8000a4a:	e08b      	b.n	8000b64 <main+0x380>

	  case 4:
		  sprintf((char *)disp.f_line, "Nalewanie.      ");
 8000a4c:	4a51      	ldr	r2, [pc, #324]	; (8000b94 <main+0x3b0>)
 8000a4e:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <main+0x398>)
 8000a50:	0011      	movs	r1, r2
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 fffa 	bl	8003a4c <siprintf>
		  sprintf((char *)disp.s_line, "                ");
 8000a58:	4a4f      	ldr	r2, [pc, #316]	; (8000b98 <main+0x3b4>)
 8000a5a:	4b4a      	ldr	r3, [pc, #296]	; (8000b84 <main+0x3a0>)
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 fff4 	bl	8003a4c <siprintf>
		  lcd_display(&disp);
 8000a64:	4b40      	ldr	r3, [pc, #256]	; (8000b68 <main+0x384>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fdc0 	bl	80005ec <lcd_display>

		  //nalewa wódę w ilości int=alkohol
		  //obrót
		  while(liczba_szklanek > 0){
 8000a6c:	e04d      	b.n	8000b0a <main+0x326>
			  HAL_Delay(1000);
 8000a6e:	23fa      	movs	r3, #250	; 0xfa
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f000 fb48 	bl	8001108 <HAL_Delay>
			  sprintf((char *)disp.s_line, "%d          ", liczba_szklanek);
 8000a78:	6a3a      	ldr	r2, [r7, #32]
 8000a7a:	4948      	ldr	r1, [pc, #288]	; (8000b9c <main+0x3b8>)
 8000a7c:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <main+0x3a0>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f002 ffe4 	bl	8003a4c <siprintf>
		  	  lcd_display(&disp);
 8000a84:	4b38      	ldr	r3, [pc, #224]	; (8000b68 <main+0x384>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fdb0 	bl	80005ec <lcd_display>
		  	  //..................................................................Otwarcie zaworu, odmierzenie, zamknięcie zaworu
		  	  HAL_GPIO_WritePin(Zawor_alkohol_GPIO_Port, Zawor_alkohol_Pin, GPIO_PIN_RESET);
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	0059      	lsls	r1, r3, #1
 8000a90:	2390      	movs	r3, #144	; 0x90
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	2200      	movs	r2, #0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fdc5 	bl	8001626 <HAL_GPIO_WritePin>
		  	  HAL_Delay(alkohol*czas_otwarcia);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	4353      	muls	r3, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fb30 	bl	8001108 <HAL_Delay>
		  	  HAL_GPIO_WritePin(Zawor_alkohol_GPIO_Port, Zawor_alkohol_Pin, GPIO_PIN_SET);
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	0059      	lsls	r1, r3, #1
 8000aac:	2390      	movs	r3, #144	; 0x90
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fdb7 	bl	8001626 <HAL_GPIO_WritePin>
		  	  HAL_Delay(1000);
 8000ab8:	23fa      	movs	r3, #250	; 0xfa
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fb23 	bl	8001108 <HAL_Delay>
		  	  //.........................................................................
			  pozycja = pozycja + zmiana_pozycji;
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	617b      	str	r3, [r7, #20]
		  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pozycja);
 8000aca:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <main+0x38c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	63da      	str	r2, [r3, #60]	; 0x3c
		  	  //..................................................................Otwarcie zaworu, odmierzenie, zamknięcie zaworu
		  	  HAL_GPIO_WritePin(Zawor_napoj_GPIO_Port, Zawor_napoj_Pin, GPIO_PIN_RESET);
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4827      	ldr	r0, [pc, #156]	; (8000b74 <main+0x390>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	0019      	movs	r1, r3
 8000adc:	f000 fda3 	bl	8001626 <HAL_GPIO_WritePin>
		  	  HAL_Delay(napoj*czas_otwarcia);
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4353      	muls	r3, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 fb0e 	bl	8001108 <HAL_Delay>
		  	  HAL_GPIO_WritePin(Zawor_napoj_GPIO_Port, Zawor_napoj_Pin, GPIO_PIN_SET);
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4820      	ldr	r0, [pc, #128]	; (8000b74 <main+0x390>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	0019      	movs	r1, r3
 8000af6:	f000 fd96 	bl	8001626 <HAL_GPIO_WritePin>
		  	  HAL_Delay(1000);
 8000afa:	23fa      	movs	r3, #250	; 0xfa
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fb02 	bl	8001108 <HAL_Delay>
		  	  liczba_szklanek--;
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
		  while(liczba_szklanek > 0){
 8000b0a:	6a3b      	ldr	r3, [r7, #32]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	dcae      	bgt.n	8000a6e <main+0x28a>
			  //nalewa przepoję w ilości int=napoj
			  //powtórzyć int=liczba_szklanek razy

		  //Po zakończeniu procesu nalewania:

		  HAL_Delay(1000);
 8000b10:	23fa      	movs	r3, #250	; 0xfa
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f000 faf7 	bl	8001108 <HAL_Delay>
		  sprintf((char *)disp.f_line, "Dzi%ckuj%c.       ", '\x2', '\x2');
 8000b1a:	4921      	ldr	r1, [pc, #132]	; (8000ba0 <main+0x3bc>)
 8000b1c:	4817      	ldr	r0, [pc, #92]	; (8000b7c <main+0x398>)
 8000b1e:	2302      	movs	r3, #2
 8000b20:	2202      	movs	r2, #2
 8000b22:	f002 ff93 	bl	8003a4c <siprintf>
		  sprintf((char *)disp.s_line, "                ");
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <main+0x3b4>)
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <main+0x3a0>)
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f002 ff8d 	bl	8003a4c <siprintf>
		  lcd_display(&disp);
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <main+0x384>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f7ff fd59 	bl	80005ec <lcd_display>
		  HAL_Delay(1000);
 8000b3a:	23fa      	movs	r3, #250	; 0xfa
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f000 fae2 	bl	8001108 <HAL_Delay>

		  ekran = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
		  liczba_szklanek = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
		  alkohol = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61fb      	str	r3, [r7, #28]
		  napoj = 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
		  pozycja = 500;
 8000b54:	23fa      	movs	r3, #250	; 0xfa
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
	  	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pozycja);
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <main+0x38c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	697a      	ldr	r2, [r7, #20]
 8000b60:	63da      	str	r2, [r3, #60]	; 0x3c
		  break;
 8000b62:	46c0      	nop			; (mov r8, r8)
	  HAL_GPIO_WritePin(Zawor_alkohol_GPIO_Port, Zawor_alkohol_Pin, GPIO_PIN_SET);
 8000b64:	e677      	b.n	8000856 <main+0x72>
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	20000120 	.word	0x20000120
 8000b6c:	0000076c 	.word	0x0000076c
 8000b70:	20000148 	.word	0x20000148
 8000b74:	48000800 	.word	0x48000800
 8000b78:	08004338 	.word	0x08004338
 8000b7c:	20000121 	.word	0x20000121
 8000b80:	0800434c 	.word	0x0800434c
 8000b84:	20000132 	.word	0x20000132
 8000b88:	08004350 	.word	0x08004350
 8000b8c:	08004364 	.word	0x08004364
 8000b90:	0800436c 	.word	0x0800436c
 8000b94:	08004380 	.word	0x08004380
 8000b98:	08004394 	.word	0x08004394
 8000b9c:	080043a8 	.word	0x080043a8
 8000ba0:	080043b8 	.word	0x080043b8

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b097      	sub	sp, #92	; 0x5c
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	2428      	movs	r4, #40	; 0x28
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2330      	movs	r3, #48	; 0x30
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f002 ff41 	bl	8003a3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bba:	2318      	movs	r3, #24
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f002 ff39 	bl	8003a3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2314      	movs	r3, #20
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f002 ff32 	bl	8003a3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd8:	0021      	movs	r1, r4
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2202      	movs	r2, #2
 8000bde:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2201      	movs	r2, #1
 8000be4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2210      	movs	r2, #16
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2202      	movs	r2, #2
 8000bf0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	22a0      	movs	r2, #160	; 0xa0
 8000bfc:	0392      	lsls	r2, r2, #14
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2200      	movs	r2, #0
 8000c04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f001 f993 	bl	8001f34 <HAL_RCC_OscConfig>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c12:	f000 f828 	bl	8000c66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	2118      	movs	r1, #24
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2207      	movs	r2, #7
 8000c1c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2202      	movs	r2, #2
 8000c22:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2101      	movs	r1, #1
 8000c34:	0018      	movs	r0, r3
 8000c36:	f001 fc97 	bl	8002568 <HAL_RCC_ClockConfig>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c3e:	f000 f812 	bl	8000c66 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2220      	movs	r2, #32
 8000c46:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 fdad 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000c5a:	f000 f804 	bl	8000c66 <Error_Handler>
  }
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b017      	add	sp, #92	; 0x5c
 8000c64:	bd90      	pop	{r4, r7, pc}

08000c66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6a:	b672      	cpsid	i
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <Error_Handler+0x8>

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c78:	699a      	ldr	r2, [r3, #24]
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	619a      	str	r2, [r3, #24]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	2201      	movs	r2, #1
 8000c88:	4013      	ands	r3, r2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c90:	69da      	ldr	r2, [r3, #28]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	0549      	lsls	r1, r1, #21
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	61da      	str	r2, [r3, #28]
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x54>)
 8000c9e:	69da      	ldr	r2, [r3, #28]
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	055b      	lsls	r3, r3, #21
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2004      	movs	r0, #4
 8000cb0:	f000 fafa 	bl	80012a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000cb4:	2004      	movs	r0, #4
 8000cb6:	f000 fb0c 	bl	80012d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cec:	f000 f9f0 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f001 ff94 	bl	8002c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	20000148 	.word	0x20000148

08000d10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <TIM1_CC_IRQHandler+0x14>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 ff88 	bl	8002c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	20000148 	.word	0x20000148

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	18d3      	adds	r3, r2, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f002 fe46 	bl	80039e8 <__errno>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	425b      	negs	r3, r3
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	18d2      	adds	r2, r2, r3
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b006      	add	sp, #24
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20002000 	.word	0x20002000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000144 	.word	0x20000144
 8000d90:	200001a8 	.word	0x200001a8

08000d94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
	...

08000da0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b096      	sub	sp, #88	; 0x58
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	2348      	movs	r3, #72	; 0x48
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	0018      	movs	r0, r3
 8000dac:	2310      	movs	r3, #16
 8000dae:	001a      	movs	r2, r3
 8000db0:	2100      	movs	r1, #0
 8000db2:	f002 fe43 	bl	8003a3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db6:	2340      	movs	r3, #64	; 0x40
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	0018      	movs	r0, r3
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f002 fe3b 	bl	8003a3c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc6:	2324      	movs	r3, #36	; 0x24
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	0018      	movs	r0, r3
 8000dcc:	231c      	movs	r3, #28
 8000dce:	001a      	movs	r2, r3
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	f002 fe33 	bl	8003a3c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	2320      	movs	r3, #32
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f002 fe2c 	bl	8003a3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000de4:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000de6:	4a47      	ldr	r2, [pc, #284]	; (8000f04 <MX_TIM1_Init+0x164>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000dea:	4b45      	ldr	r3, [pc, #276]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000dec:	222f      	movs	r2, #47	; 0x2f
 8000dee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000df6:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000df8:	4a43      	ldr	r2, [pc, #268]	; (8000f08 <MX_TIM1_Init+0x168>)
 8000dfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e02:	4b3f      	ldr	r3, [pc, #252]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e08:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f001 fdab 	bl	800296c <HAL_TIM_Base_Init>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000e1a:	f7ff ff24 	bl	8000c66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e1e:	2148      	movs	r1, #72	; 0x48
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	0152      	lsls	r2, r2, #5
 8000e26:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e28:	187a      	adds	r2, r7, r1
 8000e2a:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f002 f8d8 	bl	8002fe4 <HAL_TIM_ConfigClockSource>
 8000e34:	1e03      	subs	r3, r0, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000e38:	f7ff ff15 	bl	8000c66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f001 fde4 	bl	8002a0c <HAL_TIM_PWM_Init>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000e48:	f7ff ff0d 	bl	8000c66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e5a:	187a      	adds	r2, r7, r1
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f002 fcf5 	bl	8003850 <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000e6a:	f7ff fefc 	bl	8000c66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6e:	2124      	movs	r1, #36	; 0x24
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2260      	movs	r2, #96	; 0x60
 8000e74:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e9a:	1879      	adds	r1, r7, r1
 8000e9c:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f001 ffd9 	bl	8002e58 <HAL_TIM_PWM_ConfigChannel>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000eaa:	f7ff fedc 	bl	8000c66 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2280      	movs	r2, #128	; 0x80
 8000ed0:	0192      	lsls	r2, r2, #6
 8000ed2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eda:	1d3a      	adds	r2, r7, #4
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f002 fd13 	bl	800390c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000eea:	f7ff febc 	bl	8000c66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <MX_TIM1_Init+0x160>)
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f000 f83b 	bl	8000f6c <HAL_TIM_MspPostInit>

}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b016      	add	sp, #88	; 0x58
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	20000148 	.word	0x20000148
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	00004e1f 	.word	0x00004e1f

08000f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <HAL_TIM_Base_MspInit+0x58>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d11d      	bne.n	8000f5a <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1e:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_TIM_Base_MspInit+0x5c>)
 8000f20:	699a      	ldr	r2, [r3, #24]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_TIM_Base_MspInit+0x5c>)
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	0109      	lsls	r1, r1, #4
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	619a      	str	r2, [r3, #24]
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_TIM_Base_MspInit+0x5c>)
 8000f2e:	699a      	ldr	r2, [r3, #24]
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	011b      	lsls	r3, r3, #4
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	200d      	movs	r0, #13
 8000f40:	f000 f9b2 	bl	80012a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000f44:	200d      	movs	r0, #13
 8000f46:	f000 f9c4 	bl	80012d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200e      	movs	r0, #14
 8000f50:	f000 f9aa 	bl	80012a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000f54:	200e      	movs	r0, #14
 8000f56:	f000 f9bc 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	240c      	movs	r4, #12
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	0018      	movs	r0, r3
 8000f7a:	2314      	movs	r3, #20
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f002 fd5c 	bl	8003a3c <memset>
  if(timHandle->Instance==TIM1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <HAL_TIM_MspPostInit+0x78>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d125      	bne.n	8000fda <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_TIM_MspPostInit+0x7c>)
 8000f90:	695a      	ldr	r2, [r3, #20]
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_TIM_MspPostInit+0x7c>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	0289      	lsls	r1, r1, #10
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	615a      	str	r2, [r3, #20]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_TIM_MspPostInit+0x7c>)
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	2380      	movs	r3, #128	; 0x80
 8000fa2:	029b      	lsls	r3, r3, #10
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	00d2      	lsls	r2, r2, #3
 8000fb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	0021      	movs	r1, r4
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2202      	movs	r2, #2
 8000fca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	187a      	adds	r2, r7, r1
 8000fce:	2390      	movs	r3, #144	; 0x90
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 f999 	bl	800130c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b009      	add	sp, #36	; 0x24
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	40021000 	.word	0x40021000

08000fec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fee:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff0:	f7ff fed0 	bl	8000d94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <LoopForever+0xe>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <LoopForever+0x12>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <LoopForever+0x16>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800101a:	f002 fceb 	bl	80039f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800101e:	f7ff fbe1 	bl	80007e4 <main>

08001022 <LoopForever>:

LoopForever:
    b LoopForever
 8001022:	e7fe      	b.n	8001022 <LoopForever>
  ldr   r0, =_estack
 8001024:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8001030:	08004438 	.word	0x08004438
  ldr r2, =_sbss
 8001034:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8001038:	200001a4 	.word	0x200001a4

0800103c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_COMP_IRQHandler>
	...

08001040 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_Init+0x24>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_Init+0x24>)
 800104a:	2110      	movs	r1, #16
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001050:	2000      	movs	r0, #0
 8001052:	f000 f809 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001056:	f7ff fe0b 	bl	8000c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	0018      	movs	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	40022000 	.word	0x40022000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x5c>)
 8001072:	681c      	ldr	r4, [r3, #0]
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_InitTick+0x60>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	0019      	movs	r1, r3
 800107a:	23fa      	movs	r3, #250	; 0xfa
 800107c:	0098      	lsls	r0, r3, #2
 800107e:	f7ff f84d 	bl	800011c <__udivsi3>
 8001082:	0003      	movs	r3, r0
 8001084:	0019      	movs	r1, r3
 8001086:	0020      	movs	r0, r4
 8001088:	f7ff f848 	bl	800011c <__udivsi3>
 800108c:	0003      	movs	r3, r0
 800108e:	0018      	movs	r0, r3
 8001090:	f000 f92f 	bl	80012f2 <HAL_SYSTICK_Config>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d001      	beq.n	800109c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e00f      	b.n	80010bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d80b      	bhi.n	80010ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	2301      	movs	r3, #1
 80010a6:	425b      	negs	r3, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 f8fc 	bl	80012a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_InitTick+0x64>)
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b003      	add	sp, #12
 80010c2:	bd90      	pop	{r4, r7, pc}
 80010c4:	20000040 	.word	0x20000040
 80010c8:	20000048 	.word	0x20000048
 80010cc:	20000044 	.word	0x20000044

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <HAL_IncTick+0x1c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	001a      	movs	r2, r3
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x20>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	18d2      	adds	r2, r2, r3
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_IncTick+0x20>)
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	20000048 	.word	0x20000048
 80010f0:	20000190 	.word	0x20000190

080010f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b02      	ldr	r3, [pc, #8]	; (8001104 <HAL_GetTick+0x10>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000190 	.word	0x20000190

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff fff0 	bl	80010f4 <HAL_GetTick>
 8001114:	0003      	movs	r3, r0
 8001116:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3301      	adds	r3, #1
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	001a      	movs	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	189b      	adds	r3, r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	f7ff ffe0 	bl	80010f4 <HAL_GetTick>
 8001134:	0002      	movs	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	b004      	add	sp, #16
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	20000048 	.word	0x20000048

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	0002      	movs	r2, r0
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b7f      	cmp	r3, #127	; 0x7f
 8001162:	d809      	bhi.n	8001178 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001164:	1dfb      	adds	r3, r7, #7
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	231f      	movs	r3, #31
 800116c:	401a      	ands	r2, r3
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <__NVIC_EnableIRQ+0x30>)
 8001170:	2101      	movs	r1, #1
 8001172:	4091      	lsls	r1, r2
 8001174:	000a      	movs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]
  }
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b002      	add	sp, #8
 800117e:	bd80      	pop	{r7, pc}
 8001180:	e000e100 	.word	0xe000e100

08001184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	0002      	movs	r2, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b7f      	cmp	r3, #127	; 0x7f
 8001198:	d828      	bhi.n	80011ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119a:	4a2f      	ldr	r2, [pc, #188]	; (8001258 <__NVIC_SetPriority+0xd4>)
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	33c0      	adds	r3, #192	; 0xc0
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	589b      	ldr	r3, [r3, r2]
 80011aa:	1dfa      	adds	r2, r7, #7
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	0011      	movs	r1, r2
 80011b0:	2203      	movs	r2, #3
 80011b2:	400a      	ands	r2, r1
 80011b4:	00d2      	lsls	r2, r2, #3
 80011b6:	21ff      	movs	r1, #255	; 0xff
 80011b8:	4091      	lsls	r1, r2
 80011ba:	000a      	movs	r2, r1
 80011bc:	43d2      	mvns	r2, r2
 80011be:	401a      	ands	r2, r3
 80011c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	019b      	lsls	r3, r3, #6
 80011c6:	22ff      	movs	r2, #255	; 0xff
 80011c8:	401a      	ands	r2, r3
 80011ca:	1dfb      	adds	r3, r7, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	2303      	movs	r3, #3
 80011d2:	4003      	ands	r3, r0
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d8:	481f      	ldr	r0, [pc, #124]	; (8001258 <__NVIC_SetPriority+0xd4>)
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	b25b      	sxtb	r3, r3
 80011e0:	089b      	lsrs	r3, r3, #2
 80011e2:	430a      	orrs	r2, r1
 80011e4:	33c0      	adds	r3, #192	; 0xc0
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ea:	e031      	b.n	8001250 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <__NVIC_SetPriority+0xd8>)
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	0019      	movs	r1, r3
 80011f4:	230f      	movs	r3, #15
 80011f6:	400b      	ands	r3, r1
 80011f8:	3b08      	subs	r3, #8
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3306      	adds	r3, #6
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	18d3      	adds	r3, r2, r3
 8001202:	3304      	adds	r3, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	1dfa      	adds	r2, r7, #7
 8001208:	7812      	ldrb	r2, [r2, #0]
 800120a:	0011      	movs	r1, r2
 800120c:	2203      	movs	r2, #3
 800120e:	400a      	ands	r2, r1
 8001210:	00d2      	lsls	r2, r2, #3
 8001212:	21ff      	movs	r1, #255	; 0xff
 8001214:	4091      	lsls	r1, r2
 8001216:	000a      	movs	r2, r1
 8001218:	43d2      	mvns	r2, r2
 800121a:	401a      	ands	r2, r3
 800121c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	019b      	lsls	r3, r3, #6
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	401a      	ands	r2, r3
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	0018      	movs	r0, r3
 800122c:	2303      	movs	r3, #3
 800122e:	4003      	ands	r3, r0
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <__NVIC_SetPriority+0xd8>)
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	001c      	movs	r4, r3
 800123c:	230f      	movs	r3, #15
 800123e:	4023      	ands	r3, r4
 8001240:	3b08      	subs	r3, #8
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	430a      	orrs	r2, r1
 8001246:	3306      	adds	r3, #6
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	18c3      	adds	r3, r0, r3
 800124c:	3304      	adds	r3, #4
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	b003      	add	sp, #12
 8001256:	bd90      	pop	{r4, r7, pc}
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	045b      	lsls	r3, r3, #17
 8001270:	429a      	cmp	r2, r3
 8001272:	d301      	bcc.n	8001278 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001274:	2301      	movs	r3, #1
 8001276:	e010      	b.n	800129a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <SysTick_Config+0x44>)
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	3a01      	subs	r2, #1
 800127e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001280:	2301      	movs	r3, #1
 8001282:	425b      	negs	r3, r3
 8001284:	2103      	movs	r1, #3
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff ff7c 	bl	8001184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x44>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x44>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b002      	add	sp, #8
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	210f      	movs	r1, #15
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	1c02      	adds	r2, r0, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f7ff ff5d 	bl	8001184 <__NVIC_SetPriority>
}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b004      	add	sp, #16
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	0002      	movs	r2, r0
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7ff ff33 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff ffaf 	bl	8001260 <SysTick_Config>
 8001302:	0003      	movs	r3, r0
}
 8001304:	0018      	movs	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	b002      	add	sp, #8
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131a:	e14f      	b.n	80015bc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4091      	lsls	r1, r2
 8001326:	000a      	movs	r2, r1
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <HAL_GPIO_Init+0x28>
 8001332:	e140      	b.n	80015b6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2203      	movs	r2, #3
 8001346:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	409a      	lsls	r2, r3
 800135a:	0013      	movs	r3, r2
 800135c:	43da      	mvns	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	409a      	lsls	r2, r3
 800136e:	0013      	movs	r3, r2
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	409a      	lsls	r2, r3
 8001388:	0013      	movs	r3, r2
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	2201      	movs	r2, #1
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
 80013a0:	0013      	movs	r3, r2
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2203      	movs	r2, #3
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d017      	beq.n	80013ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	409a      	lsls	r2, r3
 80013c8:	0013      	movs	r3, r2
 80013ca:	43da      	mvns	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	409a      	lsls	r2, r3
 80013dc:	0013      	movs	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2203      	movs	r2, #3
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d123      	bne.n	800143e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	58d3      	ldr	r3, [r2, r3]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2207      	movs	r2, #7
 8001408:	4013      	ands	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	43da      	mvns	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	2107      	movs	r1, #7
 8001422:	400b      	ands	r3, r1
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	409a      	lsls	r2, r3
 8001428:	0013      	movs	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	6939      	ldr	r1, [r7, #16]
 800143c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	409a      	lsls	r2, r3
 800144c:	0013      	movs	r3, r2
 800144e:	43da      	mvns	r2, r3
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	401a      	ands	r2, r3
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	409a      	lsls	r2, r3
 8001464:	0013      	movs	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	23c0      	movs	r3, #192	; 0xc0
 8001478:	029b      	lsls	r3, r3, #10
 800147a:	4013      	ands	r3, r2
 800147c:	d100      	bne.n	8001480 <HAL_GPIO_Init+0x174>
 800147e:	e09a      	b.n	80015b6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <HAL_GPIO_Init+0x2c8>)
 8001482:	699a      	ldr	r2, [r3, #24]
 8001484:	4b53      	ldr	r3, [pc, #332]	; (80015d4 <HAL_GPIO_Init+0x2c8>)
 8001486:	2101      	movs	r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	619a      	str	r2, [r3, #24]
 800148c:	4b51      	ldr	r3, [pc, #324]	; (80015d4 <HAL_GPIO_Init+0x2c8>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	2201      	movs	r2, #1
 8001492:	4013      	ands	r3, r2
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001498:	4a4f      	ldr	r2, [pc, #316]	; (80015d8 <HAL_GPIO_Init+0x2cc>)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	089b      	lsrs	r3, r3, #2
 800149e:	3302      	adds	r3, #2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	589b      	ldr	r3, [r3, r2]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2203      	movs	r2, #3
 80014aa:	4013      	ands	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	409a      	lsls	r2, r3
 80014b2:	0013      	movs	r3, r2
 80014b4:	43da      	mvns	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	2390      	movs	r3, #144	; 0x90
 80014c0:	05db      	lsls	r3, r3, #23
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x1e2>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a44      	ldr	r2, [pc, #272]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x1de>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a43      	ldr	r2, [pc, #268]	; (80015e0 <HAL_GPIO_Init+0x2d4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x1da>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a42      	ldr	r2, [pc, #264]	; (80015e4 <HAL_GPIO_Init+0x2d8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x1d6>
 80014de:	2303      	movs	r3, #3
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x1e4>
 80014e2:	2305      	movs	r3, #5
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x1e4>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x1e4>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x1e4>
 80014ee:	2300      	movs	r3, #0
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	2103      	movs	r1, #3
 80014f4:	400a      	ands	r2, r1
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001500:	4935      	ldr	r1, [pc, #212]	; (80015d8 <HAL_GPIO_Init+0x2cc>)
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	43da      	mvns	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	2380      	movs	r3, #128	; 0x80
 8001524:	035b      	lsls	r3, r3, #13
 8001526:	4013      	ands	r3, r2
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001532:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	43da      	mvns	r2, r3
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	039b      	lsls	r3, r3, #14
 8001550:	4013      	ands	r3, r2
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	029b      	lsls	r3, r3, #10
 800157a:	4013      	ands	r3, r2
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	43da      	mvns	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	4013      	ands	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	4013      	ands	r3, r2
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	3301      	adds	r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	40da      	lsrs	r2, r3
 80015c4:	1e13      	subs	r3, r2, #0
 80015c6:	d000      	beq.n	80015ca <HAL_GPIO_Init+0x2be>
 80015c8:	e6a8      	b.n	800131c <HAL_GPIO_Init+0x10>
  } 
}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b006      	add	sp, #24
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000
 80015dc:	48000400 	.word	0x48000400
 80015e0:	48000800 	.word	0x48000800
 80015e4:	48000c00 	.word	0x48000c00
 80015e8:	40010400 	.word	0x40010400

080015ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	000a      	movs	r2, r1
 80015f6:	1cbb      	adds	r3, r7, #2
 80015f8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	1cba      	adds	r2, r7, #2
 8001600:	8812      	ldrh	r2, [r2, #0]
 8001602:	4013      	ands	r3, r2
 8001604:	d004      	beq.n	8001610 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001606:	230f      	movs	r3, #15
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	e003      	b.n	8001618 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001618:	230f      	movs	r3, #15
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	781b      	ldrb	r3, [r3, #0]
  }
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b004      	add	sp, #16
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	0008      	movs	r0, r1
 8001630:	0011      	movs	r1, r2
 8001632:	1cbb      	adds	r3, r7, #2
 8001634:	1c02      	adds	r2, r0, #0
 8001636:	801a      	strh	r2, [r3, #0]
 8001638:	1c7b      	adds	r3, r7, #1
 800163a:	1c0a      	adds	r2, r1, #0
 800163c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163e:	1c7b      	adds	r3, r7, #1
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d004      	beq.n	8001650 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001646:	1cbb      	adds	r3, r7, #2
 8001648:	881a      	ldrh	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800164e:	e003      	b.n	8001658 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001650:	1cbb      	adds	r3, r7, #2
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001658:	46c0      	nop			; (mov r8, r8)
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e082      	b.n	8001778 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2241      	movs	r2, #65	; 0x41
 8001676:	5c9b      	ldrb	r3, [r3, r2]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d107      	bne.n	800168e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2240      	movs	r2, #64	; 0x40
 8001682:	2100      	movs	r1, #0
 8001684:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	0018      	movs	r0, r3
 800168a:	f7fe febb 	bl	8000404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2241      	movs	r2, #65	; 0x41
 8001692:	2124      	movs	r1, #36	; 0x24
 8001694:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	438a      	bics	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4934      	ldr	r1, [pc, #208]	; (8001780 <HAL_I2C_Init+0x120>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4931      	ldr	r1, [pc, #196]	; (8001784 <HAL_I2C_Init+0x124>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d108      	bne.n	80016de <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0209      	lsls	r1, r1, #8
 80016d8:	430a      	orrs	r2, r1
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	e007      	b.n	80016ee <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2184      	movs	r1, #132	; 0x84
 80016e8:	0209      	lsls	r1, r1, #8
 80016ea:	430a      	orrs	r2, r1
 80016ec:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d104      	bne.n	8001700 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	491f      	ldr	r1, [pc, #124]	; (8001788 <HAL_I2C_Init+0x128>)
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	491a      	ldr	r1, [pc, #104]	; (8001784 <HAL_I2C_Init+0x124>)
 800171c:	400a      	ands	r2, r1
 800171e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695b      	ldr	r3, [r3, #20]
 8001728:	431a      	orrs	r2, r3
 800172a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69d9      	ldr	r1, [r3, #28]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2241      	movs	r2, #65	; 0x41
 8001764:	2120      	movs	r1, #32
 8001766:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2242      	movs	r2, #66	; 0x42
 8001772:	2100      	movs	r1, #0
 8001774:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}
 8001780:	f0ffffff 	.word	0xf0ffffff
 8001784:	ffff7fff 	.word	0xffff7fff
 8001788:	02008000 	.word	0x02008000

0800178c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b089      	sub	sp, #36	; 0x24
 8001790:	af02      	add	r7, sp, #8
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	0008      	movs	r0, r1
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	0019      	movs	r1, r3
 800179a:	230a      	movs	r3, #10
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	1c02      	adds	r2, r0, #0
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	2308      	movs	r3, #8
 80017a4:	18fb      	adds	r3, r7, r3
 80017a6:	1c0a      	adds	r2, r1, #0
 80017a8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2241      	movs	r2, #65	; 0x41
 80017ae:	5c9b      	ldrb	r3, [r3, r2]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b20      	cmp	r3, #32
 80017b4:	d000      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x2c>
 80017b6:	e0e7      	b.n	8001988 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	5c9b      	ldrb	r3, [r3, r2]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_I2C_Master_Transmit+0x3a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e0e1      	b.n	800198a <HAL_I2C_Master_Transmit+0x1fe>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	2101      	movs	r1, #1
 80017cc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017ce:	f7ff fc91 	bl	80010f4 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	0219      	lsls	r1, r3, #8
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2319      	movs	r3, #25
 80017e2:	2201      	movs	r2, #1
 80017e4:	f000 f8fc 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0cc      	b.n	800198a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2241      	movs	r2, #65	; 0x41
 80017f4:	2121      	movs	r1, #33	; 0x21
 80017f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2242      	movs	r2, #66	; 0x42
 80017fc:	2110      	movs	r1, #16
 80017fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2208      	movs	r2, #8
 8001810:	18ba      	adds	r2, r7, r2
 8001812:	8812      	ldrh	r2, [r2, #0]
 8001814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29b      	uxth	r3, r3
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	d911      	bls.n	800184a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	22ff      	movs	r2, #255	; 0xff
 800182a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001830:	b2da      	uxtb	r2, r3
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	045c      	lsls	r4, r3, #17
 8001836:	230a      	movs	r3, #10
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	8819      	ldrh	r1, [r3, #0]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	4b55      	ldr	r3, [pc, #340]	; (8001994 <HAL_I2C_Master_Transmit+0x208>)
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	0023      	movs	r3, r4
 8001844:	f000 faa4 	bl	8001d90 <I2C_TransferConfig>
 8001848:	e075      	b.n	8001936 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001858:	b2da      	uxtb	r2, r3
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	049c      	lsls	r4, r3, #18
 800185e:	230a      	movs	r3, #10
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	8819      	ldrh	r1, [r3, #0]
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_I2C_Master_Transmit+0x208>)
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	0023      	movs	r3, r4
 800186c:	f000 fa90 	bl	8001d90 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001870:	e061      	b.n	8001936 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	0018      	movs	r0, r3
 800187a:	f000 f8ff 	bl	8001a7c <I2C_WaitOnTXISFlagUntilTimeout>
 800187e:	1e03      	subs	r3, r0, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e081      	b.n	800198a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d03a      	beq.n	8001936 <HAL_I2C_Master_Transmit+0x1aa>
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d136      	bne.n	8001936 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	0013      	movs	r3, r2
 80018d2:	2200      	movs	r2, #0
 80018d4:	2180      	movs	r1, #128	; 0x80
 80018d6:	f000 f883 	bl	80019e0 <I2C_WaitOnFlagUntilTimeout>
 80018da:	1e03      	subs	r3, r0, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e053      	b.n	800198a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2bff      	cmp	r3, #255	; 0xff
 80018ea:	d911      	bls.n	8001910 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	22ff      	movs	r2, #255	; 0xff
 80018f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	045c      	lsls	r4, r3, #17
 80018fc:	230a      	movs	r3, #10
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	8819      	ldrh	r1, [r3, #0]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	2300      	movs	r3, #0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	0023      	movs	r3, r4
 800190a:	f000 fa41 	bl	8001d90 <I2C_TransferConfig>
 800190e:	e012      	b.n	8001936 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	b2da      	uxtb	r2, r3
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	049c      	lsls	r4, r3, #18
 8001924:	230a      	movs	r3, #10
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	8819      	ldrh	r1, [r3, #0]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	2300      	movs	r3, #0
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	0023      	movs	r3, r4
 8001932:	f000 fa2d 	bl	8001d90 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800193a:	b29b      	uxth	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d198      	bne.n	8001872 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	0018      	movs	r0, r3
 8001948:	f000 f8de 	bl	8001b08 <I2C_WaitOnSTOPFlagUntilTimeout>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d001      	beq.n	8001954 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e01a      	b.n	800198a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2220      	movs	r2, #32
 800195a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	490c      	ldr	r1, [pc, #48]	; (8001998 <HAL_I2C_Master_Transmit+0x20c>)
 8001968:	400a      	ands	r2, r1
 800196a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2241      	movs	r2, #65	; 0x41
 8001970:	2120      	movs	r1, #32
 8001972:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2242      	movs	r2, #66	; 0x42
 8001978:	2100      	movs	r1, #0
 800197a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2240      	movs	r2, #64	; 0x40
 8001980:	2100      	movs	r1, #0
 8001982:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e000      	b.n	800198a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001988:	2302      	movs	r3, #2
  }
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b007      	add	sp, #28
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	80002000 	.word	0x80002000
 8001998:	fe00e800 	.word	0xfe00e800

0800199c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d103      	bne.n	80019ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d007      	beq.n	80019d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699a      	ldr	r2, [r3, #24]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	619a      	str	r2, [r3, #24]
  }
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}

080019e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	1dfb      	adds	r3, r7, #7
 80019ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019f0:	e030      	b.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	d02d      	beq.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019f8:	f7ff fb7c 	bl	80010f4 <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d302      	bcc.n	8001a0e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d122      	bne.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	4013      	ands	r3, r2
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	425a      	negs	r2, r3
 8001a1e:	4153      	adcs	r3, r2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	001a      	movs	r2, r3
 8001a24:	1dfb      	adds	r3, r7, #7
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d113      	bne.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a30:	2220      	movs	r2, #32
 8001a32:	431a      	orrs	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2241      	movs	r2, #65	; 0x41
 8001a3c:	2120      	movs	r1, #32
 8001a3e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2242      	movs	r2, #66	; 0x42
 8001a44:	2100      	movs	r1, #0
 8001a46:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2240      	movs	r2, #64	; 0x40
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e00f      	b.n	8001a74 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	425a      	negs	r2, r3
 8001a64:	4153      	adcs	r3, r2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	001a      	movs	r2, r3
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d0bf      	beq.n	80019f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a88:	e032      	b.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f87d 	bl	8001b90 <I2C_IsErrorOccurred>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d001      	beq.n	8001a9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e030      	b.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	d025      	beq.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa4:	f7ff fb26 	bl	80010f4 <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d302      	bcc.n	8001aba <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d11a      	bne.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d013      	beq.n	8001af0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	2220      	movs	r2, #32
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2241      	movs	r2, #65	; 0x41
 8001ad8:	2120      	movs	r1, #32
 8001ada:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2242      	movs	r2, #66	; 0x42
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	2100      	movs	r1, #0
 8001aea:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e007      	b.n	8001b00 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2202      	movs	r2, #2
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d1c5      	bne.n	8001a8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b004      	add	sp, #16
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b14:	e02f      	b.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f837 	bl	8001b90 <I2C_IsErrorOccurred>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d001      	beq.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e02d      	b.n	8001b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2a:	f7ff fae3 	bl	80010f4 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d302      	bcc.n	8001b40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11a      	bne.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2220      	movs	r2, #32
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d013      	beq.n	8001b76 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	2220      	movs	r2, #32
 8001b54:	431a      	orrs	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2241      	movs	r2, #65	; 0x41
 8001b5e:	2120      	movs	r1, #32
 8001b60:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2242      	movs	r2, #66	; 0x42
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2240      	movs	r2, #64	; 0x40
 8001b6e:	2100      	movs	r1, #0
 8001b70:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e007      	b.n	8001b86 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b20      	cmp	r3, #32
 8001b82:	d1c8      	bne.n	8001b16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b08b      	sub	sp, #44	; 0x2c
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9c:	2327      	movs	r3, #39	; 0x27
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d100      	bne.n	8001bbe <I2C_IsErrorOccurred+0x2e>
 8001bbc:	e082      	b.n	8001cc4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bc6:	e060      	b.n	8001c8a <I2C_IsErrorOccurred+0xfa>
 8001bc8:	2427      	movs	r4, #39	; 0x27
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	193a      	adds	r2, r7, r4
 8001bce:	7812      	ldrb	r2, [r2, #0]
 8001bd0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	d058      	beq.n	8001c8a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bd8:	f7ff fa8c 	bl	80010f4 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d306      	bcc.n	8001bf6 <I2C_IsErrorOccurred+0x66>
 8001be8:	193b      	adds	r3, r7, r4
 8001bea:	193a      	adds	r2, r7, r4
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d149      	bne.n	8001c8a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	01db      	lsls	r3, r3, #7
 8001c00:	4013      	ands	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c04:	2013      	movs	r0, #19
 8001c06:	183b      	adds	r3, r7, r0
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	2142      	movs	r1, #66	; 0x42
 8001c0c:	5c52      	ldrb	r2, [r2, r1]
 8001c0e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	021b      	lsls	r3, r3, #8
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d126      	bne.n	8001c72 <I2C_IsErrorOccurred+0xe2>
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	01db      	lsls	r3, r3, #7
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d021      	beq.n	8001c72 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001c2e:	183b      	adds	r3, r7, r0
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d01d      	beq.n	8001c72 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2180      	movs	r1, #128	; 0x80
 8001c42:	01c9      	lsls	r1, r1, #7
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c48:	f7ff fa54 	bl	80010f4 <HAL_GetTick>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c50:	e00f      	b.n	8001c72 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c52:	f7ff fa4f 	bl	80010f4 <HAL_GetTick>
 8001c56:	0002      	movs	r2, r0
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b19      	cmp	r3, #25
 8001c5e:	d908      	bls.n	8001c72 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	2220      	movs	r2, #32
 8001c64:	4313      	orrs	r3, r2
 8001c66:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c68:	2327      	movs	r3, #39	; 0x27
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]

              break;
 8001c70:	e00b      	b.n	8001c8a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2127      	movs	r1, #39	; 0x27
 8001c7e:	187a      	adds	r2, r7, r1
 8001c80:	1879      	adds	r1, r7, r1
 8001c82:	7809      	ldrb	r1, [r1, #0]
 8001c84:	7011      	strb	r1, [r2, #0]
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d1e3      	bne.n	8001c52 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2220      	movs	r2, #32
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d004      	beq.n	8001ca2 <I2C_IsErrorOccurred+0x112>
 8001c98:	2327      	movs	r3, #39	; 0x27
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d092      	beq.n	8001bc8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001ca2:	2327      	movs	r3, #39	; 0x27
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d103      	bne.n	8001cb4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001cbc:	2327      	movs	r3, #39	; 0x27
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d00c      	beq.n	8001cf0 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	0052      	lsls	r2, r2, #1
 8001ce6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ce8:	2327      	movs	r3, #39	; 0x27
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d00c      	beq.n	8001d14 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	00d2      	lsls	r2, r2, #3
 8001d0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d0c:	2327      	movs	r3, #39	; 0x27
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d00c      	beq.n	8001d38 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	2202      	movs	r2, #2
 8001d22:	4313      	orrs	r3, r2
 8001d24:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d30:	2327      	movs	r3, #39	; 0x27
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d38:	2327      	movs	r3, #39	; 0x27
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d01d      	beq.n	8001d7e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fe29 	bl	800199c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	490d      	ldr	r1, [pc, #52]	; (8001d8c <I2C_IsErrorOccurred+0x1fc>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2241      	movs	r2, #65	; 0x41
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2242      	movs	r2, #66	; 0x42
 8001d72:	2100      	movs	r1, #0
 8001d74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001d7e:	2327      	movs	r3, #39	; 0x27
 8001d80:	18fb      	adds	r3, r7, r3
 8001d82:	781b      	ldrb	r3, [r3, #0]
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b00b      	add	sp, #44	; 0x2c
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	fe00e800 	.word	0xfe00e800

08001d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	0008      	movs	r0, r1
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	607b      	str	r3, [r7, #4]
 8001d9e:	240a      	movs	r4, #10
 8001da0:	193b      	adds	r3, r7, r4
 8001da2:	1c02      	adds	r2, r0, #0
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	2009      	movs	r0, #9
 8001da8:	183b      	adds	r3, r7, r0
 8001daa:	1c0a      	adds	r2, r1, #0
 8001dac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dae:	193b      	adds	r3, r7, r4
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	059b      	lsls	r3, r3, #22
 8001db4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	0419      	lsls	r1, r3, #16
 8001dbc:	23ff      	movs	r3, #255	; 0xff
 8001dbe:	041b      	lsls	r3, r3, #16
 8001dc0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dda:	0d51      	lsrs	r1, r2, #21
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	00d2      	lsls	r2, r2, #3
 8001de0:	400a      	ands	r2, r1
 8001de2:	4907      	ldr	r1, [pc, #28]	; (8001e00 <I2C_TransferConfig+0x70>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	43d2      	mvns	r2, r2
 8001de8:	401a      	ands	r2, r3
 8001dea:	0011      	movs	r1, r2
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b007      	add	sp, #28
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	03ff63ff 	.word	0x03ff63ff

08001e04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2241      	movs	r2, #65	; 0x41
 8001e12:	5c9b      	ldrb	r3, [r3, r2]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d138      	bne.n	8001e8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2240      	movs	r2, #64	; 0x40
 8001e1e:	5c9b      	ldrb	r3, [r3, r2]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e24:	2302      	movs	r3, #2
 8001e26:	e032      	b.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2240      	movs	r2, #64	; 0x40
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2241      	movs	r2, #65	; 0x41
 8001e34:	2124      	movs	r1, #36	; 0x24
 8001e36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2101      	movs	r1, #1
 8001e44:	438a      	bics	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4911      	ldr	r1, [pc, #68]	; (8001e98 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6819      	ldr	r1, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2101      	movs	r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2241      	movs	r2, #65	; 0x41
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2240      	movs	r2, #64	; 0x40
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
  }
}
 8001e8e:	0018      	movs	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	ffffefff 	.word	0xffffefff

08001e9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2241      	movs	r2, #65	; 0x41
 8001eaa:	5c9b      	ldrb	r3, [r3, r2]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d139      	bne.n	8001f26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	5c9b      	ldrb	r3, [r3, r2]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e033      	b.n	8001f28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2240      	movs	r2, #64	; 0x40
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2241      	movs	r2, #65	; 0x41
 8001ecc:	2124      	movs	r1, #36	; 0x24
 8001ece:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2101      	movs	r1, #1
 8001edc:	438a      	bics	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4a11      	ldr	r2, [pc, #68]	; (8001f30 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2241      	movs	r2, #65	; 0x41
 8001f16:	2120      	movs	r1, #32
 8001f18:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	2100      	movs	r1, #0
 8001f20:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e000      	b.n	8001f28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f26:	2302      	movs	r3, #2
  }
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	fffff0ff 	.word	0xfffff0ff

08001f34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e301      	b.n	800254a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x1e>
 8001f50:	e08d      	b.n	800206e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f52:	4bc3      	ldr	r3, [pc, #780]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	220c      	movs	r2, #12
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d00e      	beq.n	8001f7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f5e:	4bc0      	ldr	r3, [pc, #768]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	220c      	movs	r2, #12
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d116      	bne.n	8001f98 <HAL_RCC_OscConfig+0x64>
 8001f6a:	4bbd      	ldr	r3, [pc, #756]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	025b      	lsls	r3, r3, #9
 8001f72:	401a      	ands	r2, r3
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	025b      	lsls	r3, r3, #9
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d10d      	bne.n	8001f98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	4bb8      	ldr	r3, [pc, #736]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	029b      	lsls	r3, r3, #10
 8001f84:	4013      	ands	r3, r2
 8001f86:	d100      	bne.n	8001f8a <HAL_RCC_OscConfig+0x56>
 8001f88:	e070      	b.n	800206c <HAL_RCC_OscConfig+0x138>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d000      	beq.n	8001f94 <HAL_RCC_OscConfig+0x60>
 8001f92:	e06b      	b.n	800206c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e2d8      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x7c>
 8001fa0:	4baf      	ldr	r3, [pc, #700]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4bae      	ldr	r3, [pc, #696]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	2180      	movs	r1, #128	; 0x80
 8001fa8:	0249      	lsls	r1, r1, #9
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e02f      	b.n	8002010 <HAL_RCC_OscConfig+0xdc>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10c      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x9e>
 8001fb8:	4ba9      	ldr	r3, [pc, #676]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4ba8      	ldr	r3, [pc, #672]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	49a9      	ldr	r1, [pc, #676]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	4ba6      	ldr	r3, [pc, #664]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4ba5      	ldr	r3, [pc, #660]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fca:	49a7      	ldr	r1, [pc, #668]	; (8002268 <HAL_RCC_OscConfig+0x334>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e01e      	b.n	8002010 <HAL_RCC_OscConfig+0xdc>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d10e      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xc4>
 8001fda:	4ba1      	ldr	r3, [pc, #644]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4ba0      	ldr	r3, [pc, #640]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fe0:	2180      	movs	r1, #128	; 0x80
 8001fe2:	02c9      	lsls	r1, r1, #11
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	4b9d      	ldr	r3, [pc, #628]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b9c      	ldr	r3, [pc, #624]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	0249      	lsls	r1, r1, #9
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xdc>
 8001ff8:	4b99      	ldr	r3, [pc, #612]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b98      	ldr	r3, [pc, #608]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	4999      	ldr	r1, [pc, #612]	; (8002264 <HAL_RCC_OscConfig+0x330>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	4b96      	ldr	r3, [pc, #600]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b95      	ldr	r3, [pc, #596]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800200a:	4997      	ldr	r1, [pc, #604]	; (8002268 <HAL_RCC_OscConfig+0x334>)
 800200c:	400a      	ands	r2, r1
 800200e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d014      	beq.n	8002042 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff f86c 	bl	80010f4 <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002022:	f7ff f867 	bl	80010f4 <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b64      	cmp	r3, #100	; 0x64
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e28a      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002034:	4b8a      	ldr	r3, [pc, #552]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	029b      	lsls	r3, r3, #10
 800203c:	4013      	ands	r3, r2
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0xee>
 8002040:	e015      	b.n	800206e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002042:	f7ff f857 	bl	80010f4 <HAL_GetTick>
 8002046:	0003      	movs	r3, r0
 8002048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff f852 	bl	80010f4 <HAL_GetTick>
 8002050:	0002      	movs	r2, r0
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e275      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b80      	ldr	r3, [pc, #512]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4013      	ands	r3, r2
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x118>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2202      	movs	r2, #2
 8002074:	4013      	ands	r3, r2
 8002076:	d100      	bne.n	800207a <HAL_RCC_OscConfig+0x146>
 8002078:	e069      	b.n	800214e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800207a:	4b79      	ldr	r3, [pc, #484]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	220c      	movs	r2, #12
 8002080:	4013      	ands	r3, r2
 8002082:	d00b      	beq.n	800209c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002084:	4b76      	ldr	r3, [pc, #472]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	220c      	movs	r2, #12
 800208a:	4013      	ands	r3, r2
 800208c:	2b08      	cmp	r3, #8
 800208e:	d11c      	bne.n	80020ca <HAL_RCC_OscConfig+0x196>
 8002090:	4b73      	ldr	r3, [pc, #460]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	025b      	lsls	r3, r3, #9
 8002098:	4013      	ands	r3, r2
 800209a:	d116      	bne.n	80020ca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209c:	4b70      	ldr	r3, [pc, #448]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x17e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e24b      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b6b      	ldr	r3, [pc, #428]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	22f8      	movs	r2, #248	; 0xf8
 80020b8:	4393      	bics	r3, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	00da      	lsls	r2, r3, #3
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c8:	e041      	b.n	800214e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d024      	beq.n	800211c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4b62      	ldr	r3, [pc, #392]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020d8:	2101      	movs	r1, #1
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7ff f809 	bl	80010f4 <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e8:	f7ff f804 	bl	80010f4 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e227      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	4b59      	ldr	r3, [pc, #356]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2202      	movs	r2, #2
 8002100:	4013      	ands	r3, r2
 8002102:	d0f1      	beq.n	80020e8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b56      	ldr	r3, [pc, #344]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	22f8      	movs	r2, #248	; 0xf8
 800210a:	4393      	bics	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	00da      	lsls	r2, r3, #3
 8002114:	4b52      	ldr	r3, [pc, #328]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e018      	b.n	800214e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211c:	4b50      	ldr	r3, [pc, #320]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002122:	2101      	movs	r1, #1
 8002124:	438a      	bics	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe ffe4 	bl	80010f4 <HAL_GetTick>
 800212c:	0003      	movs	r3, r0
 800212e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002132:	f7fe ffdf 	bl	80010f4 <HAL_GetTick>
 8002136:	0002      	movs	r2, r0
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e202      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002144:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2202      	movs	r2, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d1f1      	bne.n	8002132 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2208      	movs	r2, #8
 8002154:	4013      	ands	r3, r2
 8002156:	d036      	beq.n	80021c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d019      	beq.n	8002194 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002160:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002164:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002166:	2101      	movs	r1, #1
 8002168:	430a      	orrs	r2, r1
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7fe ffc2 	bl	80010f4 <HAL_GetTick>
 8002170:	0003      	movs	r3, r0
 8002172:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002176:	f7fe ffbd 	bl	80010f4 <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1e0      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	2202      	movs	r2, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d0f1      	beq.n	8002176 <HAL_RCC_OscConfig+0x242>
 8002192:	e018      	b.n	80021c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002194:	4b32      	ldr	r3, [pc, #200]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 800219a:	2101      	movs	r1, #1
 800219c:	438a      	bics	r2, r1
 800219e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7fe ffa8 	bl	80010f4 <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021aa:	f7fe ffa3 	bl	80010f4 <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1c6      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	2202      	movs	r2, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	d1f1      	bne.n	80021aa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2204      	movs	r2, #4
 80021cc:	4013      	ands	r3, r2
 80021ce:	d100      	bne.n	80021d2 <HAL_RCC_OscConfig+0x29e>
 80021d0:	e0b4      	b.n	800233c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	201f      	movs	r0, #31
 80021d4:	183b      	adds	r3, r7, r0
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021da:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	055b      	lsls	r3, r3, #21
 80021e2:	4013      	ands	r3, r2
 80021e4:	d110      	bne.n	8002208 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	0549      	lsls	r1, r1, #21
 80021f0:	430a      	orrs	r2, r1
 80021f2:	61da      	str	r2, [r3, #28]
 80021f4:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	055b      	lsls	r3, r3, #21
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002202:	183b      	adds	r3, r7, r0
 8002204:	2201      	movs	r2, #1
 8002206:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x338>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4013      	ands	r3, r2
 8002212:	d11a      	bne.n	800224a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_RCC_OscConfig+0x338>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCC_OscConfig+0x338>)
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	0049      	lsls	r1, r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7fe ff67 	bl	80010f4 <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222c:	f7fe ff62 	bl	80010f4 <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e185      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_OscConfig+0x338>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4013      	ands	r3, r2
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10e      	bne.n	8002270 <HAL_RCC_OscConfig+0x33c>
 8002252:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002254:	6a1a      	ldr	r2, [r3, #32]
 8002256:	4b02      	ldr	r3, [pc, #8]	; (8002260 <HAL_RCC_OscConfig+0x32c>)
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	621a      	str	r2, [r3, #32]
 800225e:	e035      	b.n	80022cc <HAL_RCC_OscConfig+0x398>
 8002260:	40021000 	.word	0x40021000
 8002264:	fffeffff 	.word	0xfffeffff
 8002268:	fffbffff 	.word	0xfffbffff
 800226c:	40007000 	.word	0x40007000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10c      	bne.n	8002292 <HAL_RCC_OscConfig+0x35e>
 8002278:	4bb6      	ldr	r3, [pc, #728]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800227a:	6a1a      	ldr	r2, [r3, #32]
 800227c:	4bb5      	ldr	r3, [pc, #724]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800227e:	2101      	movs	r1, #1
 8002280:	438a      	bics	r2, r1
 8002282:	621a      	str	r2, [r3, #32]
 8002284:	4bb3      	ldr	r3, [pc, #716]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002286:	6a1a      	ldr	r2, [r3, #32]
 8002288:	4bb2      	ldr	r3, [pc, #712]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800228a:	2104      	movs	r1, #4
 800228c:	438a      	bics	r2, r1
 800228e:	621a      	str	r2, [r3, #32]
 8002290:	e01c      	b.n	80022cc <HAL_RCC_OscConfig+0x398>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x380>
 800229a:	4bae      	ldr	r3, [pc, #696]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	4bad      	ldr	r3, [pc, #692]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022a0:	2104      	movs	r1, #4
 80022a2:	430a      	orrs	r2, r1
 80022a4:	621a      	str	r2, [r3, #32]
 80022a6:	4bab      	ldr	r3, [pc, #684]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022a8:	6a1a      	ldr	r2, [r3, #32]
 80022aa:	4baa      	ldr	r3, [pc, #680]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022ac:	2101      	movs	r1, #1
 80022ae:	430a      	orrs	r2, r1
 80022b0:	621a      	str	r2, [r3, #32]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0x398>
 80022b4:	4ba7      	ldr	r3, [pc, #668]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	4ba6      	ldr	r3, [pc, #664]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	438a      	bics	r2, r1
 80022be:	621a      	str	r2, [r3, #32]
 80022c0:	4ba4      	ldr	r3, [pc, #656]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	4ba3      	ldr	r3, [pc, #652]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022c6:	2104      	movs	r1, #4
 80022c8:	438a      	bics	r2, r1
 80022ca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d014      	beq.n	80022fe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d4:	f7fe ff0e 	bl	80010f4 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7fe ff09 	bl	80010f4 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a9b      	ldr	r2, [pc, #620]	; (8002558 <HAL_RCC_OscConfig+0x624>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e12b      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f2:	4b98      	ldr	r3, [pc, #608]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x3aa>
 80022fc:	e013      	b.n	8002326 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7fe fef9 	bl	80010f4 <HAL_GetTick>
 8002302:	0003      	movs	r3, r0
 8002304:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002306:	e009      	b.n	800231c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002308:	f7fe fef4 	bl	80010f4 <HAL_GetTick>
 800230c:	0002      	movs	r2, r0
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	4a91      	ldr	r2, [pc, #580]	; (8002558 <HAL_RCC_OscConfig+0x624>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e116      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b8d      	ldr	r3, [pc, #564]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	2202      	movs	r2, #2
 8002322:	4013      	ands	r3, r2
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002326:	231f      	movs	r3, #31
 8002328:	18fb      	adds	r3, r7, r3
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	4b87      	ldr	r3, [pc, #540]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002336:	4989      	ldr	r1, [pc, #548]	; (800255c <HAL_RCC_OscConfig+0x628>)
 8002338:	400a      	ands	r2, r1
 800233a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2210      	movs	r2, #16
 8002342:	4013      	ands	r3, r2
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d12a      	bne.n	80023a4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800234e:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002352:	4b80      	ldr	r3, [pc, #512]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002354:	2104      	movs	r1, #4
 8002356:	430a      	orrs	r2, r1
 8002358:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800235a:	4b7e      	ldr	r3, [pc, #504]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800235c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235e:	4b7d      	ldr	r3, [pc, #500]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002360:	2101      	movs	r1, #1
 8002362:	430a      	orrs	r2, r1
 8002364:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7fe fec5 	bl	80010f4 <HAL_GetTick>
 800236a:	0003      	movs	r3, r0
 800236c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002370:	f7fe fec0 	bl	80010f4 <HAL_GetTick>
 8002374:	0002      	movs	r2, r0
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0e3      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002382:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	2202      	movs	r2, #2
 8002388:	4013      	ands	r3, r2
 800238a:	d0f1      	beq.n	8002370 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800238c:	4b71      	ldr	r3, [pc, #452]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	22f8      	movs	r2, #248	; 0xf8
 8002392:	4393      	bics	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	00da      	lsls	r2, r3, #3
 800239c:	4b6d      	ldr	r3, [pc, #436]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
 80023a2:	e034      	b.n	800240e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	3305      	adds	r3, #5
 80023aa:	d111      	bne.n	80023d0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023ac:	4b69      	ldr	r3, [pc, #420]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b0:	4b68      	ldr	r3, [pc, #416]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023b2:	2104      	movs	r1, #4
 80023b4:	438a      	bics	r2, r1
 80023b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023b8:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023bc:	22f8      	movs	r2, #248	; 0xf8
 80023be:	4393      	bics	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	00da      	lsls	r2, r3, #3
 80023c8:	4b62      	ldr	r3, [pc, #392]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	635a      	str	r2, [r3, #52]	; 0x34
 80023ce:	e01e      	b.n	800240e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80023d0:	4b60      	ldr	r3, [pc, #384]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d4:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023d6:	2104      	movs	r1, #4
 80023d8:	430a      	orrs	r2, r1
 80023da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80023dc:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e0:	4b5c      	ldr	r3, [pc, #368]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80023e2:	2101      	movs	r1, #1
 80023e4:	438a      	bics	r2, r1
 80023e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fe84 	bl	80010f4 <HAL_GetTick>
 80023ec:	0003      	movs	r3, r0
 80023ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023f2:	f7fe fe7f 	bl	80010f4 <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e0a2      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002404:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	2202      	movs	r2, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d1f1      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d100      	bne.n	8002418 <HAL_RCC_OscConfig+0x4e4>
 8002416:	e097      	b.n	8002548 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002418:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	220c      	movs	r2, #12
 800241e:	4013      	ands	r3, r2
 8002420:	2b08      	cmp	r3, #8
 8002422:	d100      	bne.n	8002426 <HAL_RCC_OscConfig+0x4f2>
 8002424:	e06b      	b.n	80024fe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d14c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4b48      	ldr	r3, [pc, #288]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002434:	494a      	ldr	r1, [pc, #296]	; (8002560 <HAL_RCC_OscConfig+0x62c>)
 8002436:	400a      	ands	r2, r1
 8002438:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fe fe5b 	bl	80010f4 <HAL_GetTick>
 800243e:	0003      	movs	r3, r0
 8002440:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fe56 	bl	80010f4 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e079      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	049b      	lsls	r3, r3, #18
 800245e:	4013      	ands	r3, r2
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002462:	4b3c      	ldr	r3, [pc, #240]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	220f      	movs	r2, #15
 8002468:	4393      	bics	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002472:	430a      	orrs	r2, r1
 8002474:	62da      	str	r2, [r3, #44]	; 0x2c
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <HAL_RCC_OscConfig+0x630>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	431a      	orrs	r2, r3
 800248a:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800248c:	430a      	orrs	r2, r1
 800248e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	0449      	lsls	r1, r1, #17
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249e:	f7fe fe29 	bl	80010f4 <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fe24 	bl	80010f4 <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e047      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	049b      	lsls	r3, r3, #18
 80024c2:	4013      	ands	r3, r2
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0x574>
 80024c6:	e03f      	b.n	8002548 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80024ce:	4924      	ldr	r1, [pc, #144]	; (8002560 <HAL_RCC_OscConfig+0x62c>)
 80024d0:	400a      	ands	r2, r1
 80024d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fe0e 	bl	80010f4 <HAL_GetTick>
 80024d8:	0003      	movs	r3, r0
 80024da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024de:	f7fe fe09 	bl	80010f4 <HAL_GetTick>
 80024e2:	0002      	movs	r2, r0
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e02c      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f0:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	049b      	lsls	r3, r3, #18
 80024f8:	4013      	ands	r3, r2
 80024fa:	d1f0      	bne.n	80024de <HAL_RCC_OscConfig+0x5aa>
 80024fc:	e024      	b.n	8002548 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e01f      	b.n	800254a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCC_OscConfig+0x620>)
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	2380      	movs	r3, #128	; 0x80
 800251a:	025b      	lsls	r3, r3, #9
 800251c:	401a      	ands	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	429a      	cmp	r2, r3
 8002524:	d10e      	bne.n	8002544 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	220f      	movs	r2, #15
 800252a:	401a      	ands	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d107      	bne.n	8002544 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	23f0      	movs	r3, #240	; 0xf0
 8002538:	039b      	lsls	r3, r3, #14
 800253a:	401a      	ands	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b008      	add	sp, #32
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40021000 	.word	0x40021000
 8002558:	00001388 	.word	0x00001388
 800255c:	efffffff 	.word	0xefffffff
 8002560:	feffffff 	.word	0xfeffffff
 8002564:	ffc2ffff 	.word	0xffc2ffff

08002568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0b3      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	4013      	ands	r3, r2
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d911      	bls.n	80025ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b58      	ldr	r3, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2201      	movs	r2, #1
 8002590:	4393      	bics	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	4b55      	ldr	r3, [pc, #340]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e09a      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2202      	movs	r2, #2
 80025b4:	4013      	ands	r3, r2
 80025b6:	d015      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d006      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025c2:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	4b4a      	ldr	r3, [pc, #296]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025c8:	21e0      	movs	r1, #224	; 0xe0
 80025ca:	00c9      	lsls	r1, r1, #3
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	22f0      	movs	r2, #240	; 0xf0
 80025d6:	4393      	bics	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	4b44      	ldr	r3, [pc, #272]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4013      	ands	r3, r2
 80025ec:	d040      	beq.n	8002670 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	029b      	lsls	r3, r3, #10
 80025fe:	4013      	ands	r3, r2
 8002600:	d114      	bne.n	800262c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06e      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b38      	ldr	r3, [pc, #224]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	049b      	lsls	r3, r3, #18
 8002616:	4013      	ands	r3, r2
 8002618:	d108      	bne.n	800262c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e062      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2202      	movs	r2, #2
 8002624:	4013      	ands	r3, r2
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e05b      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262c:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2203      	movs	r2, #3
 8002632:	4393      	bics	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7fe fd58 	bl	80010f4 <HAL_GetTick>
 8002644:	0003      	movs	r3, r0
 8002646:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002648:	e009      	b.n	800265e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264a:	f7fe fd53 	bl	80010f4 <HAL_GetTick>
 800264e:	0002      	movs	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	4a27      	ldr	r2, [pc, #156]	; (80026f4 <HAL_RCC_ClockConfig+0x18c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e042      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	220c      	movs	r2, #12
 8002664:	401a      	ands	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1ec      	bne.n	800264a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4013      	ands	r3, r2
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d211      	bcs.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2201      	movs	r2, #1
 8002684:	4393      	bics	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x184>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2201      	movs	r2, #1
 8002696:	4013      	ands	r3, r2
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e020      	b.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2204      	movs	r2, #4
 80026a8:	4013      	ands	r3, r2
 80026aa:	d009      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_RCC_ClockConfig+0x190>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026c0:	f000 f820 	bl	8002704 <HAL_RCC_GetSysClockFreq>
 80026c4:	0001      	movs	r1, r0
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x188>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	220f      	movs	r2, #15
 80026ce:	4013      	ands	r3, r2
 80026d0:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <HAL_RCC_ClockConfig+0x194>)
 80026d2:	5cd3      	ldrb	r3, [r2, r3]
 80026d4:	000a      	movs	r2, r1
 80026d6:	40da      	lsrs	r2, r3
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x198>)
 80026da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe fcc3 	bl	8001068 <HAL_InitTick>
  
  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b004      	add	sp, #16
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40022000 	.word	0x40022000
 80026f0:	40021000 	.word	0x40021000
 80026f4:	00001388 	.word	0x00001388
 80026f8:	fffff8ff 	.word	0xfffff8ff
 80026fc:	080043cc 	.word	0x080043cc
 8002700:	20000040 	.word	0x20000040

08002704 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	220c      	movs	r2, #12
 8002728:	4013      	ands	r3, r2
 800272a:	2b04      	cmp	r3, #4
 800272c:	d002      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x30>
 800272e:	2b08      	cmp	r3, #8
 8002730:	d003      	beq.n	800273a <HAL_RCC_GetSysClockFreq+0x36>
 8002732:	e02c      	b.n	800278e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002736:	613b      	str	r3, [r7, #16]
      break;
 8002738:	e02c      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	0c9b      	lsrs	r3, r3, #18
 800273e:	220f      	movs	r2, #15
 8002740:	4013      	ands	r3, r2
 8002742:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002748:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	220f      	movs	r2, #15
 800274e:	4013      	ands	r3, r2
 8002750:	4a16      	ldr	r2, [pc, #88]	; (80027ac <HAL_RCC_GetSysClockFreq+0xa8>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	025b      	lsls	r3, r3, #9
 800275c:	4013      	ands	r3, r2
 800275e:	d009      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	4810      	ldr	r0, [pc, #64]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002764:	f7fd fcda 	bl	800011c <__udivsi3>
 8002768:	0003      	movs	r3, r0
 800276a:	001a      	movs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4353      	muls	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e009      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	000a      	movs	r2, r1
 8002778:	0152      	lsls	r2, r2, #5
 800277a:	1a52      	subs	r2, r2, r1
 800277c:	0193      	lsls	r3, r2, #6
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	185b      	adds	r3, r3, r1
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	613b      	str	r3, [r7, #16]
      break;
 800278c:	e002      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002790:	613b      	str	r3, [r7, #16]
      break;
 8002792:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002794:	693b      	ldr	r3, [r7, #16]
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b006      	add	sp, #24
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	40021000 	.word	0x40021000
 80027a4:	007a1200 	.word	0x007a1200
 80027a8:	080043dc 	.word	0x080043dc
 80027ac:	080043ec 	.word	0x080043ec

080027b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	025b      	lsls	r3, r3, #9
 80027c8:	4013      	ands	r3, r2
 80027ca:	d100      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80027cc:	e08e      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2017      	movs	r0, #23
 80027d0:	183b      	adds	r3, r7, r0
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b5f      	ldr	r3, [pc, #380]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	055b      	lsls	r3, r3, #21
 80027de:	4013      	ands	r3, r2
 80027e0:	d110      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b5c      	ldr	r3, [pc, #368]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027e4:	69da      	ldr	r2, [r3, #28]
 80027e6:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	0549      	lsls	r1, r1, #21
 80027ec:	430a      	orrs	r2, r1
 80027ee:	61da      	str	r2, [r3, #28]
 80027f0:	4b58      	ldr	r3, [pc, #352]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	055b      	lsls	r3, r3, #21
 80027f8:	4013      	ands	r3, r2
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fe:	183b      	adds	r3, r7, r0
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b54      	ldr	r3, [pc, #336]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d11a      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002810:	4b51      	ldr	r3, [pc, #324]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b50      	ldr	r3, [pc, #320]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	0049      	lsls	r1, r1, #1
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7fe fc69 	bl	80010f4 <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	e008      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7fe fc64 	bl	80010f4 <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e087      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283a:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	4013      	ands	r3, r2
 8002844:	d0f0      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002846:	4b43      	ldr	r3, [pc, #268]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002848:	6a1a      	ldr	r2, [r3, #32]
 800284a:	23c0      	movs	r3, #192	; 0xc0
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d034      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	23c0      	movs	r3, #192	; 0xc0
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4013      	ands	r3, r2
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	429a      	cmp	r2, r3
 8002866:	d02c      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002868:	4b3a      	ldr	r3, [pc, #232]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	4a3b      	ldr	r2, [pc, #236]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800286e:	4013      	ands	r3, r2
 8002870:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002872:	4b38      	ldr	r3, [pc, #224]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	4b37      	ldr	r3, [pc, #220]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0249      	lsls	r1, r1, #9
 800287c:	430a      	orrs	r2, r1
 800287e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002880:	4b34      	ldr	r3, [pc, #208]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002882:	6a1a      	ldr	r2, [r3, #32]
 8002884:	4b33      	ldr	r3, [pc, #204]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002886:	4936      	ldr	r1, [pc, #216]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002888:	400a      	ands	r2, r1
 800288a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	4013      	ands	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289a:	f7fe fc2b 	bl	80010f4 <HAL_GetTick>
 800289e:	0003      	movs	r3, r0
 80028a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	e009      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7fe fc26 	bl	80010f4 <HAL_GetTick>
 80028a8:	0002      	movs	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	4a2d      	ldr	r2, [pc, #180]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e048      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b8:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	2202      	movs	r2, #2
 80028be:	4013      	ands	r3, r2
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c2:	4b24      	ldr	r3, [pc, #144]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a25      	ldr	r2, [pc, #148]	; (800295c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	0019      	movs	r1, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028d2:	430a      	orrs	r2, r1
 80028d4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028d6:	2317      	movs	r3, #23
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028e2:	69da      	ldr	r2, [r3, #28]
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028e6:	4920      	ldr	r1, [pc, #128]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	4013      	ands	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	2203      	movs	r2, #3
 80028fc:	4393      	bics	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002906:	430a      	orrs	r2, r1
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2220      	movs	r2, #32
 8002910:	4013      	ands	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002914:	4b0f      	ldr	r3, [pc, #60]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	2210      	movs	r2, #16
 800291a:	4393      	bics	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002924:	430a      	orrs	r2, r1
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4013      	ands	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	2240      	movs	r2, #64	; 0x40
 800293a:	4393      	bics	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002944:	430a      	orrs	r2, r1
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b006      	add	sp, #24
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	40021000 	.word	0x40021000
 8002958:	40007000 	.word	0x40007000
 800295c:	fffffcff 	.word	0xfffffcff
 8002960:	fffeffff 	.word	0xfffeffff
 8002964:	00001388 	.word	0x00001388
 8002968:	efffffff 	.word	0xefffffff

0800296c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e042      	b.n	8002a04 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	223d      	movs	r2, #61	; 0x3d
 8002982:	5c9b      	ldrb	r3, [r3, r2]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	223c      	movs	r2, #60	; 0x3c
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe fab9 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	223d      	movs	r2, #61	; 0x3d
 800299e:	2102      	movs	r1, #2
 80029a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	0019      	movs	r1, r3
 80029ac:	0010      	movs	r0, r2
 80029ae:	f000 fc15 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2246      	movs	r2, #70	; 0x46
 80029b6:	2101      	movs	r1, #1
 80029b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	223e      	movs	r2, #62	; 0x3e
 80029be:	2101      	movs	r1, #1
 80029c0:	5499      	strb	r1, [r3, r2]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	223f      	movs	r2, #63	; 0x3f
 80029c6:	2101      	movs	r1, #1
 80029c8:	5499      	strb	r1, [r3, r2]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	2101      	movs	r1, #1
 80029d0:	5499      	strb	r1, [r3, r2]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2241      	movs	r2, #65	; 0x41
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2242      	movs	r2, #66	; 0x42
 80029de:	2101      	movs	r1, #1
 80029e0:	5499      	strb	r1, [r3, r2]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2243      	movs	r2, #67	; 0x43
 80029e6:	2101      	movs	r1, #1
 80029e8:	5499      	strb	r1, [r3, r2]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2244      	movs	r2, #68	; 0x44
 80029ee:	2101      	movs	r1, #1
 80029f0:	5499      	strb	r1, [r3, r2]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2245      	movs	r2, #69	; 0x45
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	223d      	movs	r2, #61	; 0x3d
 80029fe:	2101      	movs	r1, #1
 8002a00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	0018      	movs	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	b002      	add	sp, #8
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e042      	b.n	8002aa4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	223d      	movs	r2, #61	; 0x3d
 8002a22:	5c9b      	ldrb	r3, [r3, r2]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	223c      	movs	r2, #60	; 0x3c
 8002a2e:	2100      	movs	r1, #0
 8002a30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 f839 	bl	8002aac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	223d      	movs	r2, #61	; 0x3d
 8002a3e:	2102      	movs	r1, #2
 8002a40:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	0010      	movs	r0, r2
 8002a4e:	f000 fbc5 	bl	80031dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2246      	movs	r2, #70	; 0x46
 8002a56:	2101      	movs	r1, #1
 8002a58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	223e      	movs	r2, #62	; 0x3e
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	223f      	movs	r2, #63	; 0x3f
 8002a66:	2101      	movs	r1, #1
 8002a68:	5499      	strb	r1, [r3, r2]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2240      	movs	r2, #64	; 0x40
 8002a6e:	2101      	movs	r1, #1
 8002a70:	5499      	strb	r1, [r3, r2]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2241      	movs	r2, #65	; 0x41
 8002a76:	2101      	movs	r1, #1
 8002a78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2242      	movs	r2, #66	; 0x42
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2243      	movs	r2, #67	; 0x43
 8002a86:	2101      	movs	r1, #1
 8002a88:	5499      	strb	r1, [r3, r2]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2244      	movs	r2, #68	; 0x44
 8002a8e:	2101      	movs	r1, #1
 8002a90:	5499      	strb	r1, [r3, r2]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2245      	movs	r2, #69	; 0x45
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	223d      	movs	r2, #61	; 0x3d
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d108      	bne.n	8002ade <HAL_TIM_PWM_Start+0x22>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	223e      	movs	r2, #62	; 0x3e
 8002ad0:	5c9b      	ldrb	r3, [r3, r2]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	1e5a      	subs	r2, r3, #1
 8002ad8:	4193      	sbcs	r3, r2
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	e01f      	b.n	8002b1e <HAL_TIM_PWM_Start+0x62>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d108      	bne.n	8002af6 <HAL_TIM_PWM_Start+0x3a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	223f      	movs	r2, #63	; 0x3f
 8002ae8:	5c9b      	ldrb	r3, [r3, r2]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	1e5a      	subs	r2, r3, #1
 8002af0:	4193      	sbcs	r3, r2
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e013      	b.n	8002b1e <HAL_TIM_PWM_Start+0x62>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d108      	bne.n	8002b0e <HAL_TIM_PWM_Start+0x52>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2240      	movs	r2, #64	; 0x40
 8002b00:	5c9b      	ldrb	r3, [r3, r2]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	1e5a      	subs	r2, r3, #1
 8002b08:	4193      	sbcs	r3, r2
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	e007      	b.n	8002b1e <HAL_TIM_PWM_Start+0x62>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2241      	movs	r2, #65	; 0x41
 8002b12:	5c9b      	ldrb	r3, [r3, r2]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	1e5a      	subs	r2, r3, #1
 8002b1a:	4193      	sbcs	r3, r2
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e074      	b.n	8002c10 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_PWM_Start+0x7a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	223e      	movs	r2, #62	; 0x3e
 8002b30:	2102      	movs	r1, #2
 8002b32:	5499      	strb	r1, [r3, r2]
 8002b34:	e013      	b.n	8002b5e <HAL_TIM_PWM_Start+0xa2>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_PWM_Start+0x8a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223f      	movs	r2, #63	; 0x3f
 8002b40:	2102      	movs	r1, #2
 8002b42:	5499      	strb	r1, [r3, r2]
 8002b44:	e00b      	b.n	8002b5e <HAL_TIM_PWM_Start+0xa2>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x9a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2240      	movs	r2, #64	; 0x40
 8002b50:	2102      	movs	r1, #2
 8002b52:	5499      	strb	r1, [r3, r2]
 8002b54:	e003      	b.n	8002b5e <HAL_TIM_PWM_Start+0xa2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2241      	movs	r2, #65	; 0x41
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 fe4e 	bl	8003808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <HAL_TIM_PWM_Start+0x15c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00e      	beq.n	8002b94 <HAL_TIM_PWM_Start+0xd8>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <HAL_TIM_PWM_Start+0x160>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <HAL_TIM_PWM_Start+0xd8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <HAL_TIM_PWM_Start+0x164>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d004      	beq.n	8002b94 <HAL_TIM_PWM_Start+0xd8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a25      	ldr	r2, [pc, #148]	; (8002c24 <HAL_TIM_PWM_Start+0x168>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d101      	bne.n	8002b98 <HAL_TIM_PWM_Start+0xdc>
 8002b94:	2301      	movs	r3, #1
 8002b96:	e000      	b.n	8002b9a <HAL_TIM_PWM_Start+0xde>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2180      	movs	r1, #128	; 0x80
 8002baa:	0209      	lsls	r1, r1, #8
 8002bac:	430a      	orrs	r2, r1
 8002bae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_TIM_PWM_Start+0x15c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00f      	beq.n	8002bda <HAL_TIM_PWM_Start+0x11e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	05db      	lsls	r3, r3, #23
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d009      	beq.n	8002bda <HAL_TIM_PWM_Start+0x11e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a17      	ldr	r2, [pc, #92]	; (8002c28 <HAL_TIM_PWM_Start+0x16c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_TIM_PWM_Start+0x11e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <HAL_TIM_PWM_Start+0x160>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d111      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2207      	movs	r2, #7
 8002be2:	4013      	ands	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b06      	cmp	r3, #6
 8002bea:	d010      	beq.n	8002c0e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfc:	e007      	b.n	8002c0e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b004      	add	sp, #16
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40014400 	.word	0x40014400
 8002c24:	40014800 	.word	0x40014800
 8002c28:	40000400 	.word	0x40000400

08002c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d124      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2202      	movs	r2, #2
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d11d      	bne.n	8002c8c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2203      	movs	r2, #3
 8002c56:	4252      	negs	r2, r2
 8002c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	2203      	movs	r2, #3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 fa9c 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002c74:	e007      	b.n	8002c86 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 fa8f 	bl	800319c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f000 fa9b 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2204      	movs	r2, #4
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d125      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2204      	movs	r2, #4
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d11e      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2205      	movs	r2, #5
 8002cae:	4252      	negs	r2, r2
 8002cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	23c0      	movs	r3, #192	; 0xc0
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 fa6f 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002cce:	e007      	b.n	8002ce0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 fa62 	bl	800319c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fa6e 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	2208      	movs	r2, #8
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d124      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d11d      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2209      	movs	r2, #9
 8002d08:	4252      	negs	r2, r2
 8002d0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d004      	beq.n	8002d28 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 fa43 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002d26:	e007      	b.n	8002d38 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 fa36 	bl	800319c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 fa42 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2210      	movs	r2, #16
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d125      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2210      	movs	r2, #16
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b10      	cmp	r3, #16
 8002d58:	d11e      	bne.n	8002d98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2211      	movs	r2, #17
 8002d60:	4252      	negs	r2, r2
 8002d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2208      	movs	r2, #8
 8002d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	23c0      	movs	r3, #192	; 0xc0
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 fa16 	bl	80031ac <HAL_TIM_IC_CaptureCallback>
 8002d80:	e007      	b.n	8002d92 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 fa09 	bl	800319c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fa15 	bl	80031bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4013      	ands	r3, r2
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d10f      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d108      	bne.n	8002dc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2202      	movs	r2, #2
 8002dba:	4252      	negs	r2, r2
 8002dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f000 f9e3 	bl	800318c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d10f      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b80      	cmp	r3, #128	; 0x80
 8002de0:	d108      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2281      	movs	r2, #129	; 0x81
 8002de8:	4252      	negs	r2, r2
 8002dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 fdf2 	bl	80039d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2240      	movs	r2, #64	; 0x40
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d10f      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2240      	movs	r2, #64	; 0x40
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d108      	bne.n	8002e22 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2241      	movs	r2, #65	; 0x41
 8002e16:	4252      	negs	r2, r2
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 f9d5 	bl	80031cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d10f      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d108      	bne.n	8002e50 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2221      	movs	r2, #33	; 0x21
 8002e44:	4252      	negs	r2, r2
 8002e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fdbc 	bl	80039c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e50:	46c0      	nop			; (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2317      	movs	r3, #23
 8002e66:	18fb      	adds	r3, r7, r3
 8002e68:	2200      	movs	r2, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	223c      	movs	r2, #60	; 0x3c
 8002e70:	5c9b      	ldrb	r3, [r3, r2]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e0ad      	b.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	223c      	movs	r2, #60	; 0x3c
 8002e7e:	2101      	movs	r1, #1
 8002e80:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b0c      	cmp	r3, #12
 8002e86:	d100      	bne.n	8002e8a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002e88:	e076      	b.n	8002f78 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b0c      	cmp	r3, #12
 8002e8e:	d900      	bls.n	8002e92 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002e90:	e095      	b.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d04e      	beq.n	8002f36 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d900      	bls.n	8002ea0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002e9e:	e08e      	b.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_TIM_PWM_ConfigChannel+0x56>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d021      	beq.n	8002ef0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002eac:	e087      	b.n	8002fbe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	0011      	movs	r1, r2
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 fa10 	bl	80032dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2108      	movs	r1, #8
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	438a      	bics	r2, r1
 8002eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6999      	ldr	r1, [r3, #24]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	619a      	str	r2, [r3, #24]
      break;
 8002eee:	e06b      	b.n	8002fc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f000 fa77 	bl	80033ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699a      	ldr	r2, [r3, #24]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	0109      	lsls	r1, r1, #4
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	699a      	ldr	r2, [r3, #24]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4931      	ldr	r1, [pc, #196]	; (8002fe0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002f1c:	400a      	ands	r2, r1
 8002f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6999      	ldr	r1, [r3, #24]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	021a      	lsls	r2, r3, #8
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	619a      	str	r2, [r3, #24]
      break;
 8002f34:	e048      	b.n	8002fc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	0011      	movs	r1, r2
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 fad8 	bl	80034f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2108      	movs	r1, #8
 8002f50:	430a      	orrs	r2, r1
 8002f52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69da      	ldr	r2, [r3, #28]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2104      	movs	r1, #4
 8002f60:	438a      	bics	r2, r1
 8002f62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69d9      	ldr	r1, [r3, #28]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	61da      	str	r2, [r3, #28]
      break;
 8002f76:	e027      	b.n	8002fc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 fb3d 	bl	8003600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2180      	movs	r1, #128	; 0x80
 8002f92:	0109      	lsls	r1, r1, #4
 8002f94:	430a      	orrs	r2, r1
 8002f96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	490f      	ldr	r1, [pc, #60]	; (8002fe0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69d9      	ldr	r1, [r3, #28]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	021a      	lsls	r2, r3, #8
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	61da      	str	r2, [r3, #28]
      break;
 8002fbc:	e004      	b.n	8002fc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002fbe:	2317      	movs	r3, #23
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
      break;
 8002fc6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	223c      	movs	r2, #60	; 0x3c
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5499      	strb	r1, [r3, r2]

  return status;
 8002fd0:	2317      	movs	r3, #23
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	781b      	ldrb	r3, [r3, #0]
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b006      	add	sp, #24
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	fffffbff 	.word	0xfffffbff

08002fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	230f      	movs	r3, #15
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	223c      	movs	r2, #60	; 0x3c
 8002ffa:	5c9b      	ldrb	r3, [r3, r2]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_TIM_ConfigClockSource+0x20>
 8003000:	2302      	movs	r3, #2
 8003002:	e0bc      	b.n	800317e <HAL_TIM_ConfigClockSource+0x19a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	223c      	movs	r2, #60	; 0x3c
 8003008:	2101      	movs	r1, #1
 800300a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	223d      	movs	r2, #61	; 0x3d
 8003010:	2102      	movs	r1, #2
 8003012:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2277      	movs	r2, #119	; 0x77
 8003020:	4393      	bics	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4a58      	ldr	r2, [pc, #352]	; (8003188 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	0192      	lsls	r2, r2, #6
 800303c:	4293      	cmp	r3, r2
 800303e:	d040      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0xde>
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	0192      	lsls	r2, r2, #6
 8003044:	4293      	cmp	r3, r2
 8003046:	d900      	bls.n	800304a <HAL_TIM_ConfigClockSource+0x66>
 8003048:	e088      	b.n	800315c <HAL_TIM_ConfigClockSource+0x178>
 800304a:	2280      	movs	r2, #128	; 0x80
 800304c:	0152      	lsls	r2, r2, #5
 800304e:	4293      	cmp	r3, r2
 8003050:	d100      	bne.n	8003054 <HAL_TIM_ConfigClockSource+0x70>
 8003052:	e088      	b.n	8003166 <HAL_TIM_ConfigClockSource+0x182>
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	0152      	lsls	r2, r2, #5
 8003058:	4293      	cmp	r3, r2
 800305a:	d900      	bls.n	800305e <HAL_TIM_ConfigClockSource+0x7a>
 800305c:	e07e      	b.n	800315c <HAL_TIM_ConfigClockSource+0x178>
 800305e:	2b70      	cmp	r3, #112	; 0x70
 8003060:	d018      	beq.n	8003094 <HAL_TIM_ConfigClockSource+0xb0>
 8003062:	d900      	bls.n	8003066 <HAL_TIM_ConfigClockSource+0x82>
 8003064:	e07a      	b.n	800315c <HAL_TIM_ConfigClockSource+0x178>
 8003066:	2b60      	cmp	r3, #96	; 0x60
 8003068:	d04f      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x126>
 800306a:	d900      	bls.n	800306e <HAL_TIM_ConfigClockSource+0x8a>
 800306c:	e076      	b.n	800315c <HAL_TIM_ConfigClockSource+0x178>
 800306e:	2b50      	cmp	r3, #80	; 0x50
 8003070:	d03b      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x106>
 8003072:	d900      	bls.n	8003076 <HAL_TIM_ConfigClockSource+0x92>
 8003074:	e072      	b.n	800315c <HAL_TIM_ConfigClockSource+0x178>
 8003076:	2b40      	cmp	r3, #64	; 0x40
 8003078:	d057      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x146>
 800307a:	d900      	bls.n	800307e <HAL_TIM_ConfigClockSource+0x9a>
 800307c:	e06e      	b.n	800315c <HAL_TIM_ConfigClockSource+0x178>
 800307e:	2b30      	cmp	r3, #48	; 0x30
 8003080:	d063      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x166>
 8003082:	d86b      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x178>
 8003084:	2b20      	cmp	r3, #32
 8003086:	d060      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x166>
 8003088:	d868      	bhi.n	800315c <HAL_TIM_ConfigClockSource+0x178>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d05d      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x166>
 800308e:	2b10      	cmp	r3, #16
 8003090:	d05b      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x166>
 8003092:	e063      	b.n	800315c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6899      	ldr	r1, [r3, #8]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f000 fb90 	bl	80037c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2277      	movs	r2, #119	; 0x77
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	609a      	str	r2, [r3, #8]
      break;
 80030c0:	e052      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6899      	ldr	r1, [r3, #8]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f000 fb79 	bl	80037c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	01c9      	lsls	r1, r1, #7
 80030e4:	430a      	orrs	r2, r1
 80030e6:	609a      	str	r2, [r3, #8]
      break;
 80030e8:	e03e      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	001a      	movs	r2, r3
 80030f8:	f000 faec 	bl	80036d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2150      	movs	r1, #80	; 0x50
 8003102:	0018      	movs	r0, r3
 8003104:	f000 fb46 	bl	8003794 <TIM_ITRx_SetConfig>
      break;
 8003108:	e02e      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	001a      	movs	r2, r3
 8003118:	f000 fb0a 	bl	8003730 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2160      	movs	r1, #96	; 0x60
 8003122:	0018      	movs	r0, r3
 8003124:	f000 fb36 	bl	8003794 <TIM_ITRx_SetConfig>
      break;
 8003128:	e01e      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	001a      	movs	r2, r3
 8003138:	f000 facc 	bl	80036d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2140      	movs	r1, #64	; 0x40
 8003142:	0018      	movs	r0, r3
 8003144:	f000 fb26 	bl	8003794 <TIM_ITRx_SetConfig>
      break;
 8003148:	e00e      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	0019      	movs	r1, r3
 8003154:	0010      	movs	r0, r2
 8003156:	f000 fb1d 	bl	8003794 <TIM_ITRx_SetConfig>
      break;
 800315a:	e005      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800315c:	230f      	movs	r3, #15
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
      break;
 8003164:	e000      	b.n	8003168 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003166:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	223d      	movs	r2, #61	; 0x3d
 800316c:	2101      	movs	r1, #1
 800316e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	223c      	movs	r2, #60	; 0x3c
 8003174:	2100      	movs	r1, #0
 8003176:	5499      	strb	r1, [r3, r2]

  return status;
 8003178:	230f      	movs	r3, #15
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	781b      	ldrb	r3, [r3, #0]
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b004      	add	sp, #16
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	ffff00ff 	.word	0xffff00ff

0800318c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a4:	46c0      	nop			; (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b002      	add	sp, #8
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}

080031dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a34      	ldr	r2, [pc, #208]	; (80032c0 <TIM_Base_SetConfig+0xe4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d008      	beq.n	8003206 <TIM_Base_SetConfig+0x2a>
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	2380      	movs	r3, #128	; 0x80
 80031f8:	05db      	lsls	r3, r3, #23
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d003      	beq.n	8003206 <TIM_Base_SetConfig+0x2a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a30      	ldr	r2, [pc, #192]	; (80032c4 <TIM_Base_SetConfig+0xe8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d108      	bne.n	8003218 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2270      	movs	r2, #112	; 0x70
 800320a:	4393      	bics	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <TIM_Base_SetConfig+0xe4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d018      	beq.n	8003252 <TIM_Base_SetConfig+0x76>
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	05db      	lsls	r3, r3, #23
 8003226:	429a      	cmp	r2, r3
 8003228:	d013      	beq.n	8003252 <TIM_Base_SetConfig+0x76>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a25      	ldr	r2, [pc, #148]	; (80032c4 <TIM_Base_SetConfig+0xe8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00f      	beq.n	8003252 <TIM_Base_SetConfig+0x76>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a24      	ldr	r2, [pc, #144]	; (80032c8 <TIM_Base_SetConfig+0xec>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00b      	beq.n	8003252 <TIM_Base_SetConfig+0x76>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a23      	ldr	r2, [pc, #140]	; (80032cc <TIM_Base_SetConfig+0xf0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <TIM_Base_SetConfig+0x76>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <TIM_Base_SetConfig+0xf4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_Base_SetConfig+0x76>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <TIM_Base_SetConfig+0xf8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d108      	bne.n	8003264 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a20      	ldr	r2, [pc, #128]	; (80032d8 <TIM_Base_SetConfig+0xfc>)
 8003256:	4013      	ands	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2280      	movs	r2, #128	; 0x80
 8003268:	4393      	bics	r3, r2
 800326a:	001a      	movs	r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <TIM_Base_SetConfig+0xe4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_Base_SetConfig+0xce>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <TIM_Base_SetConfig+0xf0>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <TIM_Base_SetConfig+0xce>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a0c      	ldr	r2, [pc, #48]	; (80032d0 <TIM_Base_SetConfig+0xf4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_Base_SetConfig+0xce>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <TIM_Base_SetConfig+0xf8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d103      	bne.n	80032b2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	615a      	str	r2, [r3, #20]
}
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b004      	add	sp, #16
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40000400 	.word	0x40000400
 80032c8:	40002000 	.word	0x40002000
 80032cc:	40014000 	.word	0x40014000
 80032d0:	40014400 	.word	0x40014400
 80032d4:	40014800 	.word	0x40014800
 80032d8:	fffffcff 	.word	0xfffffcff

080032dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	2201      	movs	r2, #1
 80032ec:	4393      	bics	r3, r2
 80032ee:	001a      	movs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2270      	movs	r2, #112	; 0x70
 800330a:	4393      	bics	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2203      	movs	r2, #3
 8003312:	4393      	bics	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2202      	movs	r2, #2
 8003324:	4393      	bics	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <TIM_OC1_SetConfig+0xf8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00b      	beq.n	8003352 <TIM_OC1_SetConfig+0x76>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a26      	ldr	r2, [pc, #152]	; (80033d8 <TIM_OC1_SetConfig+0xfc>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d007      	beq.n	8003352 <TIM_OC1_SetConfig+0x76>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a25      	ldr	r2, [pc, #148]	; (80033dc <TIM_OC1_SetConfig+0x100>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d003      	beq.n	8003352 <TIM_OC1_SetConfig+0x76>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <TIM_OC1_SetConfig+0x104>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d10c      	bne.n	800336c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2208      	movs	r2, #8
 8003356:	4393      	bics	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2204      	movs	r2, #4
 8003368:	4393      	bics	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <TIM_OC1_SetConfig+0xf8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00b      	beq.n	800338c <TIM_OC1_SetConfig+0xb0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <TIM_OC1_SetConfig+0xfc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d007      	beq.n	800338c <TIM_OC1_SetConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <TIM_OC1_SetConfig+0x100>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d003      	beq.n	800338c <TIM_OC1_SetConfig+0xb0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a16      	ldr	r2, [pc, #88]	; (80033e0 <TIM_OC1_SetConfig+0x104>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d111      	bne.n	80033b0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <TIM_OC1_SetConfig+0x108>)
 8003390:	4013      	ands	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <TIM_OC1_SetConfig+0x10c>)
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b006      	add	sp, #24
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40014000 	.word	0x40014000
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800
 80033e4:	fffffeff 	.word	0xfffffeff
 80033e8:	fffffdff 	.word	0xfffffdff

080033ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	2210      	movs	r2, #16
 80033fc:	4393      	bics	r3, r2
 80033fe:	001a      	movs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a2e      	ldr	r2, [pc, #184]	; (80034d4 <TIM_OC2_SetConfig+0xe8>)
 800341a:	4013      	ands	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a2d      	ldr	r2, [pc, #180]	; (80034d8 <TIM_OC2_SetConfig+0xec>)
 8003422:	4013      	ands	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2220      	movs	r2, #32
 8003436:	4393      	bics	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a24      	ldr	r2, [pc, #144]	; (80034dc <TIM_OC2_SetConfig+0xf0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10d      	bne.n	800346a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	4393      	bics	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2240      	movs	r2, #64	; 0x40
 8003466:	4393      	bics	r3, r2
 8003468:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <TIM_OC2_SetConfig+0xf0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00b      	beq.n	800348a <TIM_OC2_SetConfig+0x9e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <TIM_OC2_SetConfig+0xf4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <TIM_OC2_SetConfig+0x9e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <TIM_OC2_SetConfig+0xf8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d003      	beq.n	800348a <TIM_OC2_SetConfig+0x9e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <TIM_OC2_SetConfig+0xfc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d113      	bne.n	80034b2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4a17      	ldr	r2, [pc, #92]	; (80034ec <TIM_OC2_SetConfig+0x100>)
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <TIM_OC2_SetConfig+0x104>)
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	621a      	str	r2, [r3, #32]
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b006      	add	sp, #24
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	ffff8fff 	.word	0xffff8fff
 80034d8:	fffffcff 	.word	0xfffffcff
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40014000 	.word	0x40014000
 80034e4:	40014400 	.word	0x40014400
 80034e8:	40014800 	.word	0x40014800
 80034ec:	fffffbff 	.word	0xfffffbff
 80034f0:	fffff7ff 	.word	0xfffff7ff

080034f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4a35      	ldr	r2, [pc, #212]	; (80035d8 <TIM_OC3_SetConfig+0xe4>)
 8003504:	401a      	ands	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2270      	movs	r2, #112	; 0x70
 8003520:	4393      	bics	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2203      	movs	r2, #3
 8003528:	4393      	bics	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	4a28      	ldr	r2, [pc, #160]	; (80035dc <TIM_OC3_SetConfig+0xe8>)
 800353a:	4013      	ands	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a24      	ldr	r2, [pc, #144]	; (80035e0 <TIM_OC3_SetConfig+0xec>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10d      	bne.n	800356e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <TIM_OC3_SetConfig+0xf0>)
 8003556:	4013      	ands	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <TIM_OC3_SetConfig+0xf4>)
 800356a:	4013      	ands	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a1b      	ldr	r2, [pc, #108]	; (80035e0 <TIM_OC3_SetConfig+0xec>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_OC3_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <TIM_OC3_SetConfig+0xf8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_OC3_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <TIM_OC3_SetConfig+0xfc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_OC3_SetConfig+0x9a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <TIM_OC3_SetConfig+0x100>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d113      	bne.n	80035b6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <TIM_OC3_SetConfig+0x104>)
 8003592:	4013      	ands	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4a18      	ldr	r2, [pc, #96]	; (80035fc <TIM_OC3_SetConfig+0x108>)
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	621a      	str	r2, [r3, #32]
}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b006      	add	sp, #24
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	fffffeff 	.word	0xfffffeff
 80035dc:	fffffdff 	.word	0xfffffdff
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	fffff7ff 	.word	0xfffff7ff
 80035e8:	fffffbff 	.word	0xfffffbff
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800
 80035f8:	ffffefff 	.word	0xffffefff
 80035fc:	ffffdfff 	.word	0xffffdfff

08003600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <TIM_OC4_SetConfig+0xb0>)
 8003610:	401a      	ands	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a22      	ldr	r2, [pc, #136]	; (80036b4 <TIM_OC4_SetConfig+0xb4>)
 800362c:	4013      	ands	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <TIM_OC4_SetConfig+0xb8>)
 8003634:	4013      	ands	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4a1d      	ldr	r2, [pc, #116]	; (80036bc <TIM_OC4_SetConfig+0xbc>)
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	031b      	lsls	r3, r3, #12
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <TIM_OC4_SetConfig+0xc0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <TIM_OC4_SetConfig+0x78>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <TIM_OC4_SetConfig+0xc4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <TIM_OC4_SetConfig+0x78>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a17      	ldr	r2, [pc, #92]	; (80036c8 <TIM_OC4_SetConfig+0xc8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_OC4_SetConfig+0x78>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a16      	ldr	r2, [pc, #88]	; (80036cc <TIM_OC4_SetConfig+0xcc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d109      	bne.n	800368c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <TIM_OC4_SetConfig+0xd0>)
 800367c:	4013      	ands	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	019b      	lsls	r3, r3, #6
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	621a      	str	r2, [r3, #32]
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b006      	add	sp, #24
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	ffffefff 	.word	0xffffefff
 80036b4:	ffff8fff 	.word	0xffff8fff
 80036b8:	fffffcff 	.word	0xfffffcff
 80036bc:	ffffdfff 	.word	0xffffdfff
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40014400 	.word	0x40014400
 80036cc:	40014800 	.word	0x40014800
 80036d0:	ffffbfff 	.word	0xffffbfff

080036d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4393      	bics	r3, r2
 80036ee:	001a      	movs	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	22f0      	movs	r2, #240	; 0xf0
 80036fe:	4393      	bics	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	220a      	movs	r2, #10
 8003710:	4393      	bics	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	621a      	str	r2, [r3, #32]
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b006      	add	sp, #24
 800372e:	bd80      	pop	{r7, pc}

08003730 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	2210      	movs	r2, #16
 8003742:	4393      	bics	r3, r2
 8003744:	001a      	movs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	4a0d      	ldr	r2, [pc, #52]	; (8003790 <TIM_TI2_ConfigInputStage+0x60>)
 800375a:	4013      	ands	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	031b      	lsls	r3, r3, #12
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	22a0      	movs	r2, #160	; 0xa0
 800376c:	4393      	bics	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	621a      	str	r2, [r3, #32]
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b006      	add	sp, #24
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	ffff0fff 	.word	0xffff0fff

08003794 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2270      	movs	r2, #112	; 0x70
 80037a8:	4393      	bics	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	2207      	movs	r2, #7
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	609a      	str	r2, [r3, #8]
}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b004      	add	sp, #16
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <TIM_ETR_SetConfig+0x3c>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	021a      	lsls	r2, r3, #8
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	609a      	str	r2, [r3, #8]
}
 80037fc:	46c0      	nop			; (mov r8, r8)
 80037fe:	46bd      	mov	sp, r7
 8003800:	b006      	add	sp, #24
 8003802:	bd80      	pop	{r7, pc}
 8003804:	ffff00ff 	.word	0xffff00ff

08003808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	221f      	movs	r2, #31
 8003818:	4013      	ands	r3, r2
 800381a:	2201      	movs	r2, #1
 800381c:	409a      	lsls	r2, r3
 800381e:	0013      	movs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	43d2      	mvns	r2, r2
 800382a:	401a      	ands	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	211f      	movs	r1, #31
 8003838:	400b      	ands	r3, r1
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	4099      	lsls	r1, r3
 800383e:	000b      	movs	r3, r1
 8003840:	431a      	orrs	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b006      	add	sp, #24
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	223c      	movs	r2, #60	; 0x3c
 800385e:	5c9b      	ldrb	r3, [r3, r2]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003864:	2302      	movs	r3, #2
 8003866:	e047      	b.n	80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	223c      	movs	r2, #60	; 0x3c
 800386c:	2101      	movs	r1, #1
 800386e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	223d      	movs	r2, #61	; 0x3d
 8003874:	2102      	movs	r1, #2
 8003876:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2270      	movs	r2, #112	; 0x70
 800388c:	4393      	bics	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a16      	ldr	r2, [pc, #88]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00f      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	05db      	lsls	r3, r3, #23
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d009      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a11      	ldr	r2, [pc, #68]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a10      	ldr	r2, [pc, #64]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d10c      	bne.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	4393      	bics	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	223d      	movs	r2, #61	; 0x3d
 80038ea:	2101      	movs	r1, #1
 80038ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	223c      	movs	r2, #60	; 0x3c
 80038f2:	2100      	movs	r1, #0
 80038f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b004      	add	sp, #16
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40000400 	.word	0x40000400
 8003908:	40014000 	.word	0x40014000

0800390c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	223c      	movs	r2, #60	; 0x3c
 800391e:	5c9b      	ldrb	r3, [r3, r2]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003924:	2302      	movs	r3, #2
 8003926:	e03e      	b.n	80039a6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	223c      	movs	r2, #60	; 0x3c
 800392c:	2101      	movs	r1, #1
 800392e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	4393      	bics	r3, r2
 8003936:	001a      	movs	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003944:	401a      	ands	r2, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003952:	401a      	ands	r2, r3
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003960:	401a      	ands	r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4a13      	ldr	r2, [pc, #76]	; (80039bc <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800396e:	401a      	ands	r2, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800397c:	401a      	ands	r2, r3
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800398a:	401a      	ands	r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	223c      	movs	r2, #60	; 0x3c
 80039a0:	2100      	movs	r1, #0
 80039a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	fffffcff 	.word	0xfffffcff
 80039b4:	fffffbff 	.word	0xfffffbff
 80039b8:	fffff7ff 	.word	0xfffff7ff
 80039bc:	ffffefff 	.word	0xffffefff
 80039c0:	ffffdfff 	.word	0xffffdfff
 80039c4:	ffffbfff 	.word	0xffffbfff

080039c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039e0:	46c0      	nop			; (mov r8, r8)
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <__errno>:
 80039e8:	4b01      	ldr	r3, [pc, #4]	; (80039f0 <__errno+0x8>)
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	4770      	bx	lr
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	2000004c 	.word	0x2000004c

080039f4 <__libc_init_array>:
 80039f4:	b570      	push	{r4, r5, r6, lr}
 80039f6:	2600      	movs	r6, #0
 80039f8:	4d0c      	ldr	r5, [pc, #48]	; (8003a2c <__libc_init_array+0x38>)
 80039fa:	4c0d      	ldr	r4, [pc, #52]	; (8003a30 <__libc_init_array+0x3c>)
 80039fc:	1b64      	subs	r4, r4, r5
 80039fe:	10a4      	asrs	r4, r4, #2
 8003a00:	42a6      	cmp	r6, r4
 8003a02:	d109      	bne.n	8003a18 <__libc_init_array+0x24>
 8003a04:	2600      	movs	r6, #0
 8003a06:	f000 fc8b 	bl	8004320 <_init>
 8003a0a:	4d0a      	ldr	r5, [pc, #40]	; (8003a34 <__libc_init_array+0x40>)
 8003a0c:	4c0a      	ldr	r4, [pc, #40]	; (8003a38 <__libc_init_array+0x44>)
 8003a0e:	1b64      	subs	r4, r4, r5
 8003a10:	10a4      	asrs	r4, r4, #2
 8003a12:	42a6      	cmp	r6, r4
 8003a14:	d105      	bne.n	8003a22 <__libc_init_array+0x2e>
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	00b3      	lsls	r3, r6, #2
 8003a1a:	58eb      	ldr	r3, [r5, r3]
 8003a1c:	4798      	blx	r3
 8003a1e:	3601      	adds	r6, #1
 8003a20:	e7ee      	b.n	8003a00 <__libc_init_array+0xc>
 8003a22:	00b3      	lsls	r3, r6, #2
 8003a24:	58eb      	ldr	r3, [r5, r3]
 8003a26:	4798      	blx	r3
 8003a28:	3601      	adds	r6, #1
 8003a2a:	e7f2      	b.n	8003a12 <__libc_init_array+0x1e>
 8003a2c:	08004430 	.word	0x08004430
 8003a30:	08004430 	.word	0x08004430
 8003a34:	08004430 	.word	0x08004430
 8003a38:	08004434 	.word	0x08004434

08003a3c <memset>:
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	1882      	adds	r2, r0, r2
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d100      	bne.n	8003a46 <memset+0xa>
 8003a44:	4770      	bx	lr
 8003a46:	7019      	strb	r1, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	e7f9      	b.n	8003a40 <memset+0x4>

08003a4c <siprintf>:
 8003a4c:	b40e      	push	{r1, r2, r3}
 8003a4e:	b500      	push	{lr}
 8003a50:	490b      	ldr	r1, [pc, #44]	; (8003a80 <siprintf+0x34>)
 8003a52:	b09c      	sub	sp, #112	; 0x70
 8003a54:	ab1d      	add	r3, sp, #116	; 0x74
 8003a56:	9002      	str	r0, [sp, #8]
 8003a58:	9006      	str	r0, [sp, #24]
 8003a5a:	9107      	str	r1, [sp, #28]
 8003a5c:	9104      	str	r1, [sp, #16]
 8003a5e:	4809      	ldr	r0, [pc, #36]	; (8003a84 <siprintf+0x38>)
 8003a60:	4909      	ldr	r1, [pc, #36]	; (8003a88 <siprintf+0x3c>)
 8003a62:	cb04      	ldmia	r3!, {r2}
 8003a64:	9105      	str	r1, [sp, #20]
 8003a66:	6800      	ldr	r0, [r0, #0]
 8003a68:	a902      	add	r1, sp, #8
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	f000 f870 	bl	8003b50 <_svfiprintf_r>
 8003a70:	2300      	movs	r3, #0
 8003a72:	9a02      	ldr	r2, [sp, #8]
 8003a74:	7013      	strb	r3, [r2, #0]
 8003a76:	b01c      	add	sp, #112	; 0x70
 8003a78:	bc08      	pop	{r3}
 8003a7a:	b003      	add	sp, #12
 8003a7c:	4718      	bx	r3
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	7fffffff 	.word	0x7fffffff
 8003a84:	2000004c 	.word	0x2000004c
 8003a88:	ffff0208 	.word	0xffff0208

08003a8c <__ssputs_r>:
 8003a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8e:	688e      	ldr	r6, [r1, #8]
 8003a90:	b085      	sub	sp, #20
 8003a92:	0007      	movs	r7, r0
 8003a94:	000c      	movs	r4, r1
 8003a96:	9203      	str	r2, [sp, #12]
 8003a98:	9301      	str	r3, [sp, #4]
 8003a9a:	429e      	cmp	r6, r3
 8003a9c:	d83c      	bhi.n	8003b18 <__ssputs_r+0x8c>
 8003a9e:	2390      	movs	r3, #144	; 0x90
 8003aa0:	898a      	ldrh	r2, [r1, #12]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	421a      	tst	r2, r3
 8003aa6:	d034      	beq.n	8003b12 <__ssputs_r+0x86>
 8003aa8:	6909      	ldr	r1, [r1, #16]
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	6960      	ldr	r0, [r4, #20]
 8003aae:	1a5b      	subs	r3, r3, r1
 8003ab0:	9302      	str	r3, [sp, #8]
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	4343      	muls	r3, r0
 8003ab6:	0fdd      	lsrs	r5, r3, #31
 8003ab8:	18ed      	adds	r5, r5, r3
 8003aba:	9b01      	ldr	r3, [sp, #4]
 8003abc:	9802      	ldr	r0, [sp, #8]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	181b      	adds	r3, r3, r0
 8003ac2:	106d      	asrs	r5, r5, #1
 8003ac4:	42ab      	cmp	r3, r5
 8003ac6:	d900      	bls.n	8003aca <__ssputs_r+0x3e>
 8003ac8:	001d      	movs	r5, r3
 8003aca:	0553      	lsls	r3, r2, #21
 8003acc:	d532      	bpl.n	8003b34 <__ssputs_r+0xa8>
 8003ace:	0029      	movs	r1, r5
 8003ad0:	0038      	movs	r0, r7
 8003ad2:	f000 fb53 	bl	800417c <_malloc_r>
 8003ad6:	1e06      	subs	r6, r0, #0
 8003ad8:	d109      	bne.n	8003aee <__ssputs_r+0x62>
 8003ada:	230c      	movs	r3, #12
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	2340      	movs	r3, #64	; 0x40
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	89a2      	ldrh	r2, [r4, #12]
 8003ae4:	4240      	negs	r0, r0
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	81a3      	strh	r3, [r4, #12]
 8003aea:	b005      	add	sp, #20
 8003aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aee:	9a02      	ldr	r2, [sp, #8]
 8003af0:	6921      	ldr	r1, [r4, #16]
 8003af2:	f000 faba 	bl	800406a <memcpy>
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	4a14      	ldr	r2, [pc, #80]	; (8003b4c <__ssputs_r+0xc0>)
 8003afa:	401a      	ands	r2, r3
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	4313      	orrs	r3, r2
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	9b02      	ldr	r3, [sp, #8]
 8003b04:	6126      	str	r6, [r4, #16]
 8003b06:	18f6      	adds	r6, r6, r3
 8003b08:	6026      	str	r6, [r4, #0]
 8003b0a:	6165      	str	r5, [r4, #20]
 8003b0c:	9e01      	ldr	r6, [sp, #4]
 8003b0e:	1aed      	subs	r5, r5, r3
 8003b10:	60a5      	str	r5, [r4, #8]
 8003b12:	9b01      	ldr	r3, [sp, #4]
 8003b14:	429e      	cmp	r6, r3
 8003b16:	d900      	bls.n	8003b1a <__ssputs_r+0x8e>
 8003b18:	9e01      	ldr	r6, [sp, #4]
 8003b1a:	0032      	movs	r2, r6
 8003b1c:	9903      	ldr	r1, [sp, #12]
 8003b1e:	6820      	ldr	r0, [r4, #0]
 8003b20:	f000 faac 	bl	800407c <memmove>
 8003b24:	68a3      	ldr	r3, [r4, #8]
 8003b26:	2000      	movs	r0, #0
 8003b28:	1b9b      	subs	r3, r3, r6
 8003b2a:	60a3      	str	r3, [r4, #8]
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	199e      	adds	r6, r3, r6
 8003b30:	6026      	str	r6, [r4, #0]
 8003b32:	e7da      	b.n	8003aea <__ssputs_r+0x5e>
 8003b34:	002a      	movs	r2, r5
 8003b36:	0038      	movs	r0, r7
 8003b38:	f000 fb96 	bl	8004268 <_realloc_r>
 8003b3c:	1e06      	subs	r6, r0, #0
 8003b3e:	d1e0      	bne.n	8003b02 <__ssputs_r+0x76>
 8003b40:	0038      	movs	r0, r7
 8003b42:	6921      	ldr	r1, [r4, #16]
 8003b44:	f000 faae 	bl	80040a4 <_free_r>
 8003b48:	e7c7      	b.n	8003ada <__ssputs_r+0x4e>
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	fffffb7f 	.word	0xfffffb7f

08003b50 <_svfiprintf_r>:
 8003b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b52:	b0a1      	sub	sp, #132	; 0x84
 8003b54:	9003      	str	r0, [sp, #12]
 8003b56:	001d      	movs	r5, r3
 8003b58:	898b      	ldrh	r3, [r1, #12]
 8003b5a:	000f      	movs	r7, r1
 8003b5c:	0016      	movs	r6, r2
 8003b5e:	061b      	lsls	r3, r3, #24
 8003b60:	d511      	bpl.n	8003b86 <_svfiprintf_r+0x36>
 8003b62:	690b      	ldr	r3, [r1, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10e      	bne.n	8003b86 <_svfiprintf_r+0x36>
 8003b68:	2140      	movs	r1, #64	; 0x40
 8003b6a:	f000 fb07 	bl	800417c <_malloc_r>
 8003b6e:	6038      	str	r0, [r7, #0]
 8003b70:	6138      	str	r0, [r7, #16]
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d105      	bne.n	8003b82 <_svfiprintf_r+0x32>
 8003b76:	230c      	movs	r3, #12
 8003b78:	9a03      	ldr	r2, [sp, #12]
 8003b7a:	3801      	subs	r0, #1
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	b021      	add	sp, #132	; 0x84
 8003b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b82:	2340      	movs	r3, #64	; 0x40
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	2300      	movs	r3, #0
 8003b88:	ac08      	add	r4, sp, #32
 8003b8a:	6163      	str	r3, [r4, #20]
 8003b8c:	3320      	adds	r3, #32
 8003b8e:	7663      	strb	r3, [r4, #25]
 8003b90:	3310      	adds	r3, #16
 8003b92:	76a3      	strb	r3, [r4, #26]
 8003b94:	9507      	str	r5, [sp, #28]
 8003b96:	0035      	movs	r5, r6
 8003b98:	782b      	ldrb	r3, [r5, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <_svfiprintf_r+0x52>
 8003b9e:	2b25      	cmp	r3, #37	; 0x25
 8003ba0:	d147      	bne.n	8003c32 <_svfiprintf_r+0xe2>
 8003ba2:	1bab      	subs	r3, r5, r6
 8003ba4:	9305      	str	r3, [sp, #20]
 8003ba6:	42b5      	cmp	r5, r6
 8003ba8:	d00c      	beq.n	8003bc4 <_svfiprintf_r+0x74>
 8003baa:	0032      	movs	r2, r6
 8003bac:	0039      	movs	r1, r7
 8003bae:	9803      	ldr	r0, [sp, #12]
 8003bb0:	f7ff ff6c 	bl	8003a8c <__ssputs_r>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d100      	bne.n	8003bba <_svfiprintf_r+0x6a>
 8003bb8:	e0ae      	b.n	8003d18 <_svfiprintf_r+0x1c8>
 8003bba:	6962      	ldr	r2, [r4, #20]
 8003bbc:	9b05      	ldr	r3, [sp, #20]
 8003bbe:	4694      	mov	ip, r2
 8003bc0:	4463      	add	r3, ip
 8003bc2:	6163      	str	r3, [r4, #20]
 8003bc4:	782b      	ldrb	r3, [r5, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d100      	bne.n	8003bcc <_svfiprintf_r+0x7c>
 8003bca:	e0a5      	b.n	8003d18 <_svfiprintf_r+0x1c8>
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2300      	movs	r3, #0
 8003bd0:	4252      	negs	r2, r2
 8003bd2:	6062      	str	r2, [r4, #4]
 8003bd4:	a904      	add	r1, sp, #16
 8003bd6:	3254      	adds	r2, #84	; 0x54
 8003bd8:	1852      	adds	r2, r2, r1
 8003bda:	1c6e      	adds	r6, r5, #1
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	60e3      	str	r3, [r4, #12]
 8003be0:	60a3      	str	r3, [r4, #8]
 8003be2:	7013      	strb	r3, [r2, #0]
 8003be4:	65a3      	str	r3, [r4, #88]	; 0x58
 8003be6:	2205      	movs	r2, #5
 8003be8:	7831      	ldrb	r1, [r6, #0]
 8003bea:	4854      	ldr	r0, [pc, #336]	; (8003d3c <_svfiprintf_r+0x1ec>)
 8003bec:	f000 fa32 	bl	8004054 <memchr>
 8003bf0:	1c75      	adds	r5, r6, #1
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d11f      	bne.n	8003c36 <_svfiprintf_r+0xe6>
 8003bf6:	6822      	ldr	r2, [r4, #0]
 8003bf8:	06d3      	lsls	r3, r2, #27
 8003bfa:	d504      	bpl.n	8003c06 <_svfiprintf_r+0xb6>
 8003bfc:	2353      	movs	r3, #83	; 0x53
 8003bfe:	a904      	add	r1, sp, #16
 8003c00:	185b      	adds	r3, r3, r1
 8003c02:	2120      	movs	r1, #32
 8003c04:	7019      	strb	r1, [r3, #0]
 8003c06:	0713      	lsls	r3, r2, #28
 8003c08:	d504      	bpl.n	8003c14 <_svfiprintf_r+0xc4>
 8003c0a:	2353      	movs	r3, #83	; 0x53
 8003c0c:	a904      	add	r1, sp, #16
 8003c0e:	185b      	adds	r3, r3, r1
 8003c10:	212b      	movs	r1, #43	; 0x2b
 8003c12:	7019      	strb	r1, [r3, #0]
 8003c14:	7833      	ldrb	r3, [r6, #0]
 8003c16:	2b2a      	cmp	r3, #42	; 0x2a
 8003c18:	d016      	beq.n	8003c48 <_svfiprintf_r+0xf8>
 8003c1a:	0035      	movs	r5, r6
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	200a      	movs	r0, #10
 8003c20:	68e3      	ldr	r3, [r4, #12]
 8003c22:	782a      	ldrb	r2, [r5, #0]
 8003c24:	1c6e      	adds	r6, r5, #1
 8003c26:	3a30      	subs	r2, #48	; 0x30
 8003c28:	2a09      	cmp	r2, #9
 8003c2a:	d94e      	bls.n	8003cca <_svfiprintf_r+0x17a>
 8003c2c:	2900      	cmp	r1, #0
 8003c2e:	d111      	bne.n	8003c54 <_svfiprintf_r+0x104>
 8003c30:	e017      	b.n	8003c62 <_svfiprintf_r+0x112>
 8003c32:	3501      	adds	r5, #1
 8003c34:	e7b0      	b.n	8003b98 <_svfiprintf_r+0x48>
 8003c36:	4b41      	ldr	r3, [pc, #260]	; (8003d3c <_svfiprintf_r+0x1ec>)
 8003c38:	6822      	ldr	r2, [r4, #0]
 8003c3a:	1ac0      	subs	r0, r0, r3
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	4083      	lsls	r3, r0
 8003c40:	4313      	orrs	r3, r2
 8003c42:	002e      	movs	r6, r5
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	e7ce      	b.n	8003be6 <_svfiprintf_r+0x96>
 8003c48:	9b07      	ldr	r3, [sp, #28]
 8003c4a:	1d19      	adds	r1, r3, #4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	9107      	str	r1, [sp, #28]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db01      	blt.n	8003c58 <_svfiprintf_r+0x108>
 8003c54:	930b      	str	r3, [sp, #44]	; 0x2c
 8003c56:	e004      	b.n	8003c62 <_svfiprintf_r+0x112>
 8003c58:	425b      	negs	r3, r3
 8003c5a:	60e3      	str	r3, [r4, #12]
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	6023      	str	r3, [r4, #0]
 8003c62:	782b      	ldrb	r3, [r5, #0]
 8003c64:	2b2e      	cmp	r3, #46	; 0x2e
 8003c66:	d10a      	bne.n	8003c7e <_svfiprintf_r+0x12e>
 8003c68:	786b      	ldrb	r3, [r5, #1]
 8003c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c6c:	d135      	bne.n	8003cda <_svfiprintf_r+0x18a>
 8003c6e:	9b07      	ldr	r3, [sp, #28]
 8003c70:	3502      	adds	r5, #2
 8003c72:	1d1a      	adds	r2, r3, #4
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	9207      	str	r2, [sp, #28]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db2b      	blt.n	8003cd4 <_svfiprintf_r+0x184>
 8003c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c7e:	4e30      	ldr	r6, [pc, #192]	; (8003d40 <_svfiprintf_r+0x1f0>)
 8003c80:	2203      	movs	r2, #3
 8003c82:	0030      	movs	r0, r6
 8003c84:	7829      	ldrb	r1, [r5, #0]
 8003c86:	f000 f9e5 	bl	8004054 <memchr>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	d006      	beq.n	8003c9c <_svfiprintf_r+0x14c>
 8003c8e:	2340      	movs	r3, #64	; 0x40
 8003c90:	1b80      	subs	r0, r0, r6
 8003c92:	4083      	lsls	r3, r0
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	3501      	adds	r5, #1
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	7829      	ldrb	r1, [r5, #0]
 8003c9e:	2206      	movs	r2, #6
 8003ca0:	4828      	ldr	r0, [pc, #160]	; (8003d44 <_svfiprintf_r+0x1f4>)
 8003ca2:	1c6e      	adds	r6, r5, #1
 8003ca4:	7621      	strb	r1, [r4, #24]
 8003ca6:	f000 f9d5 	bl	8004054 <memchr>
 8003caa:	2800      	cmp	r0, #0
 8003cac:	d03c      	beq.n	8003d28 <_svfiprintf_r+0x1d8>
 8003cae:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <_svfiprintf_r+0x1f8>)
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d125      	bne.n	8003d00 <_svfiprintf_r+0x1b0>
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	9b07      	ldr	r3, [sp, #28]
 8003cb8:	3307      	adds	r3, #7
 8003cba:	4393      	bics	r3, r2
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	9307      	str	r3, [sp, #28]
 8003cc0:	6963      	ldr	r3, [r4, #20]
 8003cc2:	9a04      	ldr	r2, [sp, #16]
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	6163      	str	r3, [r4, #20]
 8003cc8:	e765      	b.n	8003b96 <_svfiprintf_r+0x46>
 8003cca:	4343      	muls	r3, r0
 8003ccc:	0035      	movs	r5, r6
 8003cce:	2101      	movs	r1, #1
 8003cd0:	189b      	adds	r3, r3, r2
 8003cd2:	e7a6      	b.n	8003c22 <_svfiprintf_r+0xd2>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	425b      	negs	r3, r3
 8003cd8:	e7d0      	b.n	8003c7c <_svfiprintf_r+0x12c>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	200a      	movs	r0, #10
 8003cde:	001a      	movs	r2, r3
 8003ce0:	3501      	adds	r5, #1
 8003ce2:	6063      	str	r3, [r4, #4]
 8003ce4:	7829      	ldrb	r1, [r5, #0]
 8003ce6:	1c6e      	adds	r6, r5, #1
 8003ce8:	3930      	subs	r1, #48	; 0x30
 8003cea:	2909      	cmp	r1, #9
 8003cec:	d903      	bls.n	8003cf6 <_svfiprintf_r+0x1a6>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0c5      	beq.n	8003c7e <_svfiprintf_r+0x12e>
 8003cf2:	9209      	str	r2, [sp, #36]	; 0x24
 8003cf4:	e7c3      	b.n	8003c7e <_svfiprintf_r+0x12e>
 8003cf6:	4342      	muls	r2, r0
 8003cf8:	0035      	movs	r5, r6
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	1852      	adds	r2, r2, r1
 8003cfe:	e7f1      	b.n	8003ce4 <_svfiprintf_r+0x194>
 8003d00:	ab07      	add	r3, sp, #28
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	003a      	movs	r2, r7
 8003d06:	0021      	movs	r1, r4
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <_svfiprintf_r+0x1fc>)
 8003d0a:	9803      	ldr	r0, [sp, #12]
 8003d0c:	e000      	b.n	8003d10 <_svfiprintf_r+0x1c0>
 8003d0e:	bf00      	nop
 8003d10:	9004      	str	r0, [sp, #16]
 8003d12:	9b04      	ldr	r3, [sp, #16]
 8003d14:	3301      	adds	r3, #1
 8003d16:	d1d3      	bne.n	8003cc0 <_svfiprintf_r+0x170>
 8003d18:	89bb      	ldrh	r3, [r7, #12]
 8003d1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003d1c:	065b      	lsls	r3, r3, #25
 8003d1e:	d400      	bmi.n	8003d22 <_svfiprintf_r+0x1d2>
 8003d20:	e72d      	b.n	8003b7e <_svfiprintf_r+0x2e>
 8003d22:	2001      	movs	r0, #1
 8003d24:	4240      	negs	r0, r0
 8003d26:	e72a      	b.n	8003b7e <_svfiprintf_r+0x2e>
 8003d28:	ab07      	add	r3, sp, #28
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	003a      	movs	r2, r7
 8003d2e:	0021      	movs	r1, r4
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <_svfiprintf_r+0x1fc>)
 8003d32:	9803      	ldr	r0, [sp, #12]
 8003d34:	f000 f87c 	bl	8003e30 <_printf_i>
 8003d38:	e7ea      	b.n	8003d10 <_svfiprintf_r+0x1c0>
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	080043fc 	.word	0x080043fc
 8003d40:	08004402 	.word	0x08004402
 8003d44:	08004406 	.word	0x08004406
 8003d48:	00000000 	.word	0x00000000
 8003d4c:	08003a8d 	.word	0x08003a8d

08003d50 <_printf_common>:
 8003d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d52:	0015      	movs	r5, r2
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	688a      	ldr	r2, [r1, #8]
 8003d58:	690b      	ldr	r3, [r1, #16]
 8003d5a:	000c      	movs	r4, r1
 8003d5c:	9000      	str	r0, [sp, #0]
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	da00      	bge.n	8003d64 <_printf_common+0x14>
 8003d62:	0013      	movs	r3, r2
 8003d64:	0022      	movs	r2, r4
 8003d66:	602b      	str	r3, [r5, #0]
 8003d68:	3243      	adds	r2, #67	; 0x43
 8003d6a:	7812      	ldrb	r2, [r2, #0]
 8003d6c:	2a00      	cmp	r2, #0
 8003d6e:	d001      	beq.n	8003d74 <_printf_common+0x24>
 8003d70:	3301      	adds	r3, #1
 8003d72:	602b      	str	r3, [r5, #0]
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	069b      	lsls	r3, r3, #26
 8003d78:	d502      	bpl.n	8003d80 <_printf_common+0x30>
 8003d7a:	682b      	ldr	r3, [r5, #0]
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	602b      	str	r3, [r5, #0]
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	2306      	movs	r3, #6
 8003d84:	0017      	movs	r7, r2
 8003d86:	401f      	ands	r7, r3
 8003d88:	421a      	tst	r2, r3
 8003d8a:	d027      	beq.n	8003ddc <_printf_common+0x8c>
 8003d8c:	0023      	movs	r3, r4
 8003d8e:	3343      	adds	r3, #67	; 0x43
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	1e5a      	subs	r2, r3, #1
 8003d94:	4193      	sbcs	r3, r2
 8003d96:	6822      	ldr	r2, [r4, #0]
 8003d98:	0692      	lsls	r2, r2, #26
 8003d9a:	d430      	bmi.n	8003dfe <_printf_common+0xae>
 8003d9c:	0022      	movs	r2, r4
 8003d9e:	9901      	ldr	r1, [sp, #4]
 8003da0:	9800      	ldr	r0, [sp, #0]
 8003da2:	9e08      	ldr	r6, [sp, #32]
 8003da4:	3243      	adds	r2, #67	; 0x43
 8003da6:	47b0      	blx	r6
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d025      	beq.n	8003df8 <_printf_common+0xa8>
 8003dac:	2306      	movs	r3, #6
 8003dae:	6820      	ldr	r0, [r4, #0]
 8003db0:	682a      	ldr	r2, [r5, #0]
 8003db2:	68e1      	ldr	r1, [r4, #12]
 8003db4:	2500      	movs	r5, #0
 8003db6:	4003      	ands	r3, r0
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d103      	bne.n	8003dc4 <_printf_common+0x74>
 8003dbc:	1a8d      	subs	r5, r1, r2
 8003dbe:	43eb      	mvns	r3, r5
 8003dc0:	17db      	asrs	r3, r3, #31
 8003dc2:	401d      	ands	r5, r3
 8003dc4:	68a3      	ldr	r3, [r4, #8]
 8003dc6:	6922      	ldr	r2, [r4, #16]
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	dd01      	ble.n	8003dd0 <_printf_common+0x80>
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	18ed      	adds	r5, r5, r3
 8003dd0:	2700      	movs	r7, #0
 8003dd2:	42bd      	cmp	r5, r7
 8003dd4:	d120      	bne.n	8003e18 <_printf_common+0xc8>
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	e010      	b.n	8003dfc <_printf_common+0xac>
 8003dda:	3701      	adds	r7, #1
 8003ddc:	68e3      	ldr	r3, [r4, #12]
 8003dde:	682a      	ldr	r2, [r5, #0]
 8003de0:	1a9b      	subs	r3, r3, r2
 8003de2:	42bb      	cmp	r3, r7
 8003de4:	ddd2      	ble.n	8003d8c <_printf_common+0x3c>
 8003de6:	0022      	movs	r2, r4
 8003de8:	2301      	movs	r3, #1
 8003dea:	9901      	ldr	r1, [sp, #4]
 8003dec:	9800      	ldr	r0, [sp, #0]
 8003dee:	9e08      	ldr	r6, [sp, #32]
 8003df0:	3219      	adds	r2, #25
 8003df2:	47b0      	blx	r6
 8003df4:	1c43      	adds	r3, r0, #1
 8003df6:	d1f0      	bne.n	8003dda <_printf_common+0x8a>
 8003df8:	2001      	movs	r0, #1
 8003dfa:	4240      	negs	r0, r0
 8003dfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dfe:	2030      	movs	r0, #48	; 0x30
 8003e00:	18e1      	adds	r1, r4, r3
 8003e02:	3143      	adds	r1, #67	; 0x43
 8003e04:	7008      	strb	r0, [r1, #0]
 8003e06:	0021      	movs	r1, r4
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	3145      	adds	r1, #69	; 0x45
 8003e0c:	7809      	ldrb	r1, [r1, #0]
 8003e0e:	18a2      	adds	r2, r4, r2
 8003e10:	3243      	adds	r2, #67	; 0x43
 8003e12:	3302      	adds	r3, #2
 8003e14:	7011      	strb	r1, [r2, #0]
 8003e16:	e7c1      	b.n	8003d9c <_printf_common+0x4c>
 8003e18:	0022      	movs	r2, r4
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	9901      	ldr	r1, [sp, #4]
 8003e1e:	9800      	ldr	r0, [sp, #0]
 8003e20:	9e08      	ldr	r6, [sp, #32]
 8003e22:	321a      	adds	r2, #26
 8003e24:	47b0      	blx	r6
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	d0e6      	beq.n	8003df8 <_printf_common+0xa8>
 8003e2a:	3701      	adds	r7, #1
 8003e2c:	e7d1      	b.n	8003dd2 <_printf_common+0x82>
	...

08003e30 <_printf_i>:
 8003e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e32:	b08b      	sub	sp, #44	; 0x2c
 8003e34:	9206      	str	r2, [sp, #24]
 8003e36:	000a      	movs	r2, r1
 8003e38:	3243      	adds	r2, #67	; 0x43
 8003e3a:	9307      	str	r3, [sp, #28]
 8003e3c:	9005      	str	r0, [sp, #20]
 8003e3e:	9204      	str	r2, [sp, #16]
 8003e40:	7e0a      	ldrb	r2, [r1, #24]
 8003e42:	000c      	movs	r4, r1
 8003e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e46:	2a78      	cmp	r2, #120	; 0x78
 8003e48:	d807      	bhi.n	8003e5a <_printf_i+0x2a>
 8003e4a:	2a62      	cmp	r2, #98	; 0x62
 8003e4c:	d809      	bhi.n	8003e62 <_printf_i+0x32>
 8003e4e:	2a00      	cmp	r2, #0
 8003e50:	d100      	bne.n	8003e54 <_printf_i+0x24>
 8003e52:	e0c1      	b.n	8003fd8 <_printf_i+0x1a8>
 8003e54:	2a58      	cmp	r2, #88	; 0x58
 8003e56:	d100      	bne.n	8003e5a <_printf_i+0x2a>
 8003e58:	e08c      	b.n	8003f74 <_printf_i+0x144>
 8003e5a:	0026      	movs	r6, r4
 8003e5c:	3642      	adds	r6, #66	; 0x42
 8003e5e:	7032      	strb	r2, [r6, #0]
 8003e60:	e022      	b.n	8003ea8 <_printf_i+0x78>
 8003e62:	0010      	movs	r0, r2
 8003e64:	3863      	subs	r0, #99	; 0x63
 8003e66:	2815      	cmp	r0, #21
 8003e68:	d8f7      	bhi.n	8003e5a <_printf_i+0x2a>
 8003e6a:	f7fc f94d 	bl	8000108 <__gnu_thumb1_case_shi>
 8003e6e:	0016      	.short	0x0016
 8003e70:	fff6001f 	.word	0xfff6001f
 8003e74:	fff6fff6 	.word	0xfff6fff6
 8003e78:	001ffff6 	.word	0x001ffff6
 8003e7c:	fff6fff6 	.word	0xfff6fff6
 8003e80:	fff6fff6 	.word	0xfff6fff6
 8003e84:	003600a8 	.word	0x003600a8
 8003e88:	fff6009a 	.word	0xfff6009a
 8003e8c:	00b9fff6 	.word	0x00b9fff6
 8003e90:	0036fff6 	.word	0x0036fff6
 8003e94:	fff6fff6 	.word	0xfff6fff6
 8003e98:	009e      	.short	0x009e
 8003e9a:	0026      	movs	r6, r4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	3642      	adds	r6, #66	; 0x42
 8003ea0:	1d11      	adds	r1, r2, #4
 8003ea2:	6019      	str	r1, [r3, #0]
 8003ea4:	6813      	ldr	r3, [r2, #0]
 8003ea6:	7033      	strb	r3, [r6, #0]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0a7      	b.n	8003ffc <_printf_i+0x1cc>
 8003eac:	6808      	ldr	r0, [r1, #0]
 8003eae:	6819      	ldr	r1, [r3, #0]
 8003eb0:	1d0a      	adds	r2, r1, #4
 8003eb2:	0605      	lsls	r5, r0, #24
 8003eb4:	d50b      	bpl.n	8003ece <_printf_i+0x9e>
 8003eb6:	680d      	ldr	r5, [r1, #0]
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	da03      	bge.n	8003ec6 <_printf_i+0x96>
 8003ebe:	232d      	movs	r3, #45	; 0x2d
 8003ec0:	9a04      	ldr	r2, [sp, #16]
 8003ec2:	426d      	negs	r5, r5
 8003ec4:	7013      	strb	r3, [r2, #0]
 8003ec6:	4b61      	ldr	r3, [pc, #388]	; (800404c <_printf_i+0x21c>)
 8003ec8:	270a      	movs	r7, #10
 8003eca:	9303      	str	r3, [sp, #12]
 8003ecc:	e01b      	b.n	8003f06 <_printf_i+0xd6>
 8003ece:	680d      	ldr	r5, [r1, #0]
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	0641      	lsls	r1, r0, #25
 8003ed4:	d5f1      	bpl.n	8003eba <_printf_i+0x8a>
 8003ed6:	b22d      	sxth	r5, r5
 8003ed8:	e7ef      	b.n	8003eba <_printf_i+0x8a>
 8003eda:	680d      	ldr	r5, [r1, #0]
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	1d08      	adds	r0, r1, #4
 8003ee0:	6018      	str	r0, [r3, #0]
 8003ee2:	062e      	lsls	r6, r5, #24
 8003ee4:	d501      	bpl.n	8003eea <_printf_i+0xba>
 8003ee6:	680d      	ldr	r5, [r1, #0]
 8003ee8:	e003      	b.n	8003ef2 <_printf_i+0xc2>
 8003eea:	066d      	lsls	r5, r5, #25
 8003eec:	d5fb      	bpl.n	8003ee6 <_printf_i+0xb6>
 8003eee:	680d      	ldr	r5, [r1, #0]
 8003ef0:	b2ad      	uxth	r5, r5
 8003ef2:	4b56      	ldr	r3, [pc, #344]	; (800404c <_printf_i+0x21c>)
 8003ef4:	2708      	movs	r7, #8
 8003ef6:	9303      	str	r3, [sp, #12]
 8003ef8:	2a6f      	cmp	r2, #111	; 0x6f
 8003efa:	d000      	beq.n	8003efe <_printf_i+0xce>
 8003efc:	3702      	adds	r7, #2
 8003efe:	0023      	movs	r3, r4
 8003f00:	2200      	movs	r2, #0
 8003f02:	3343      	adds	r3, #67	; 0x43
 8003f04:	701a      	strb	r2, [r3, #0]
 8003f06:	6863      	ldr	r3, [r4, #4]
 8003f08:	60a3      	str	r3, [r4, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	db03      	blt.n	8003f16 <_printf_i+0xe6>
 8003f0e:	2204      	movs	r2, #4
 8003f10:	6821      	ldr	r1, [r4, #0]
 8003f12:	4391      	bics	r1, r2
 8003f14:	6021      	str	r1, [r4, #0]
 8003f16:	2d00      	cmp	r5, #0
 8003f18:	d102      	bne.n	8003f20 <_printf_i+0xf0>
 8003f1a:	9e04      	ldr	r6, [sp, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00c      	beq.n	8003f3a <_printf_i+0x10a>
 8003f20:	9e04      	ldr	r6, [sp, #16]
 8003f22:	0028      	movs	r0, r5
 8003f24:	0039      	movs	r1, r7
 8003f26:	f7fc f97f 	bl	8000228 <__aeabi_uidivmod>
 8003f2a:	9b03      	ldr	r3, [sp, #12]
 8003f2c:	3e01      	subs	r6, #1
 8003f2e:	5c5b      	ldrb	r3, [r3, r1]
 8003f30:	7033      	strb	r3, [r6, #0]
 8003f32:	002b      	movs	r3, r5
 8003f34:	0005      	movs	r5, r0
 8003f36:	429f      	cmp	r7, r3
 8003f38:	d9f3      	bls.n	8003f22 <_printf_i+0xf2>
 8003f3a:	2f08      	cmp	r7, #8
 8003f3c:	d109      	bne.n	8003f52 <_printf_i+0x122>
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	07db      	lsls	r3, r3, #31
 8003f42:	d506      	bpl.n	8003f52 <_printf_i+0x122>
 8003f44:	6863      	ldr	r3, [r4, #4]
 8003f46:	6922      	ldr	r2, [r4, #16]
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	dc02      	bgt.n	8003f52 <_printf_i+0x122>
 8003f4c:	2330      	movs	r3, #48	; 0x30
 8003f4e:	3e01      	subs	r6, #1
 8003f50:	7033      	strb	r3, [r6, #0]
 8003f52:	9b04      	ldr	r3, [sp, #16]
 8003f54:	1b9b      	subs	r3, r3, r6
 8003f56:	6123      	str	r3, [r4, #16]
 8003f58:	9b07      	ldr	r3, [sp, #28]
 8003f5a:	0021      	movs	r1, r4
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	9805      	ldr	r0, [sp, #20]
 8003f60:	9b06      	ldr	r3, [sp, #24]
 8003f62:	aa09      	add	r2, sp, #36	; 0x24
 8003f64:	f7ff fef4 	bl	8003d50 <_printf_common>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d14c      	bne.n	8004006 <_printf_i+0x1d6>
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	4240      	negs	r0, r0
 8003f70:	b00b      	add	sp, #44	; 0x2c
 8003f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f74:	3145      	adds	r1, #69	; 0x45
 8003f76:	700a      	strb	r2, [r1, #0]
 8003f78:	4a34      	ldr	r2, [pc, #208]	; (800404c <_printf_i+0x21c>)
 8003f7a:	9203      	str	r2, [sp, #12]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	6821      	ldr	r1, [r4, #0]
 8003f80:	ca20      	ldmia	r2!, {r5}
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	0608      	lsls	r0, r1, #24
 8003f86:	d516      	bpl.n	8003fb6 <_printf_i+0x186>
 8003f88:	07cb      	lsls	r3, r1, #31
 8003f8a:	d502      	bpl.n	8003f92 <_printf_i+0x162>
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	4319      	orrs	r1, r3
 8003f90:	6021      	str	r1, [r4, #0]
 8003f92:	2710      	movs	r7, #16
 8003f94:	2d00      	cmp	r5, #0
 8003f96:	d1b2      	bne.n	8003efe <_printf_i+0xce>
 8003f98:	2320      	movs	r3, #32
 8003f9a:	6822      	ldr	r2, [r4, #0]
 8003f9c:	439a      	bics	r2, r3
 8003f9e:	6022      	str	r2, [r4, #0]
 8003fa0:	e7ad      	b.n	8003efe <_printf_i+0xce>
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	6809      	ldr	r1, [r1, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	6022      	str	r2, [r4, #0]
 8003faa:	0022      	movs	r2, r4
 8003fac:	2178      	movs	r1, #120	; 0x78
 8003fae:	3245      	adds	r2, #69	; 0x45
 8003fb0:	7011      	strb	r1, [r2, #0]
 8003fb2:	4a27      	ldr	r2, [pc, #156]	; (8004050 <_printf_i+0x220>)
 8003fb4:	e7e1      	b.n	8003f7a <_printf_i+0x14a>
 8003fb6:	0648      	lsls	r0, r1, #25
 8003fb8:	d5e6      	bpl.n	8003f88 <_printf_i+0x158>
 8003fba:	b2ad      	uxth	r5, r5
 8003fbc:	e7e4      	b.n	8003f88 <_printf_i+0x158>
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	680d      	ldr	r5, [r1, #0]
 8003fc2:	1d10      	adds	r0, r2, #4
 8003fc4:	6949      	ldr	r1, [r1, #20]
 8003fc6:	6018      	str	r0, [r3, #0]
 8003fc8:	6813      	ldr	r3, [r2, #0]
 8003fca:	062e      	lsls	r6, r5, #24
 8003fcc:	d501      	bpl.n	8003fd2 <_printf_i+0x1a2>
 8003fce:	6019      	str	r1, [r3, #0]
 8003fd0:	e002      	b.n	8003fd8 <_printf_i+0x1a8>
 8003fd2:	066d      	lsls	r5, r5, #25
 8003fd4:	d5fb      	bpl.n	8003fce <_printf_i+0x19e>
 8003fd6:	8019      	strh	r1, [r3, #0]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	9e04      	ldr	r6, [sp, #16]
 8003fdc:	6123      	str	r3, [r4, #16]
 8003fde:	e7bb      	b.n	8003f58 <_printf_i+0x128>
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	1d11      	adds	r1, r2, #4
 8003fe4:	6019      	str	r1, [r3, #0]
 8003fe6:	6816      	ldr	r6, [r2, #0]
 8003fe8:	2100      	movs	r1, #0
 8003fea:	0030      	movs	r0, r6
 8003fec:	6862      	ldr	r2, [r4, #4]
 8003fee:	f000 f831 	bl	8004054 <memchr>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d001      	beq.n	8003ffa <_printf_i+0x1ca>
 8003ff6:	1b80      	subs	r0, r0, r6
 8003ff8:	6060      	str	r0, [r4, #4]
 8003ffa:	6863      	ldr	r3, [r4, #4]
 8003ffc:	6123      	str	r3, [r4, #16]
 8003ffe:	2300      	movs	r3, #0
 8004000:	9a04      	ldr	r2, [sp, #16]
 8004002:	7013      	strb	r3, [r2, #0]
 8004004:	e7a8      	b.n	8003f58 <_printf_i+0x128>
 8004006:	6923      	ldr	r3, [r4, #16]
 8004008:	0032      	movs	r2, r6
 800400a:	9906      	ldr	r1, [sp, #24]
 800400c:	9805      	ldr	r0, [sp, #20]
 800400e:	9d07      	ldr	r5, [sp, #28]
 8004010:	47a8      	blx	r5
 8004012:	1c43      	adds	r3, r0, #1
 8004014:	d0aa      	beq.n	8003f6c <_printf_i+0x13c>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	079b      	lsls	r3, r3, #30
 800401a:	d415      	bmi.n	8004048 <_printf_i+0x218>
 800401c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800401e:	68e0      	ldr	r0, [r4, #12]
 8004020:	4298      	cmp	r0, r3
 8004022:	daa5      	bge.n	8003f70 <_printf_i+0x140>
 8004024:	0018      	movs	r0, r3
 8004026:	e7a3      	b.n	8003f70 <_printf_i+0x140>
 8004028:	0022      	movs	r2, r4
 800402a:	2301      	movs	r3, #1
 800402c:	9906      	ldr	r1, [sp, #24]
 800402e:	9805      	ldr	r0, [sp, #20]
 8004030:	9e07      	ldr	r6, [sp, #28]
 8004032:	3219      	adds	r2, #25
 8004034:	47b0      	blx	r6
 8004036:	1c43      	adds	r3, r0, #1
 8004038:	d098      	beq.n	8003f6c <_printf_i+0x13c>
 800403a:	3501      	adds	r5, #1
 800403c:	68e3      	ldr	r3, [r4, #12]
 800403e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	42ab      	cmp	r3, r5
 8004044:	dcf0      	bgt.n	8004028 <_printf_i+0x1f8>
 8004046:	e7e9      	b.n	800401c <_printf_i+0x1ec>
 8004048:	2500      	movs	r5, #0
 800404a:	e7f7      	b.n	800403c <_printf_i+0x20c>
 800404c:	0800440d 	.word	0x0800440d
 8004050:	0800441e 	.word	0x0800441e

08004054 <memchr>:
 8004054:	b2c9      	uxtb	r1, r1
 8004056:	1882      	adds	r2, r0, r2
 8004058:	4290      	cmp	r0, r2
 800405a:	d101      	bne.n	8004060 <memchr+0xc>
 800405c:	2000      	movs	r0, #0
 800405e:	4770      	bx	lr
 8004060:	7803      	ldrb	r3, [r0, #0]
 8004062:	428b      	cmp	r3, r1
 8004064:	d0fb      	beq.n	800405e <memchr+0xa>
 8004066:	3001      	adds	r0, #1
 8004068:	e7f6      	b.n	8004058 <memchr+0x4>

0800406a <memcpy>:
 800406a:	2300      	movs	r3, #0
 800406c:	b510      	push	{r4, lr}
 800406e:	429a      	cmp	r2, r3
 8004070:	d100      	bne.n	8004074 <memcpy+0xa>
 8004072:	bd10      	pop	{r4, pc}
 8004074:	5ccc      	ldrb	r4, [r1, r3]
 8004076:	54c4      	strb	r4, [r0, r3]
 8004078:	3301      	adds	r3, #1
 800407a:	e7f8      	b.n	800406e <memcpy+0x4>

0800407c <memmove>:
 800407c:	b510      	push	{r4, lr}
 800407e:	4288      	cmp	r0, r1
 8004080:	d902      	bls.n	8004088 <memmove+0xc>
 8004082:	188b      	adds	r3, r1, r2
 8004084:	4298      	cmp	r0, r3
 8004086:	d303      	bcc.n	8004090 <memmove+0x14>
 8004088:	2300      	movs	r3, #0
 800408a:	e007      	b.n	800409c <memmove+0x20>
 800408c:	5c8b      	ldrb	r3, [r1, r2]
 800408e:	5483      	strb	r3, [r0, r2]
 8004090:	3a01      	subs	r2, #1
 8004092:	d2fb      	bcs.n	800408c <memmove+0x10>
 8004094:	bd10      	pop	{r4, pc}
 8004096:	5ccc      	ldrb	r4, [r1, r3]
 8004098:	54c4      	strb	r4, [r0, r3]
 800409a:	3301      	adds	r3, #1
 800409c:	429a      	cmp	r2, r3
 800409e:	d1fa      	bne.n	8004096 <memmove+0x1a>
 80040a0:	e7f8      	b.n	8004094 <memmove+0x18>
	...

080040a4 <_free_r>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	0005      	movs	r5, r0
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d010      	beq.n	80040ce <_free_r+0x2a>
 80040ac:	1f0c      	subs	r4, r1, #4
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	da00      	bge.n	80040b6 <_free_r+0x12>
 80040b4:	18e4      	adds	r4, r4, r3
 80040b6:	0028      	movs	r0, r5
 80040b8:	f000 f918 	bl	80042ec <__malloc_lock>
 80040bc:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <_free_r+0x90>)
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <_free_r+0x2c>
 80040c4:	6063      	str	r3, [r4, #4]
 80040c6:	6014      	str	r4, [r2, #0]
 80040c8:	0028      	movs	r0, r5
 80040ca:	f000 f917 	bl	80042fc <__malloc_unlock>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	42a3      	cmp	r3, r4
 80040d2:	d908      	bls.n	80040e6 <_free_r+0x42>
 80040d4:	6821      	ldr	r1, [r4, #0]
 80040d6:	1860      	adds	r0, r4, r1
 80040d8:	4283      	cmp	r3, r0
 80040da:	d1f3      	bne.n	80040c4 <_free_r+0x20>
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	1841      	adds	r1, r0, r1
 80040e2:	6021      	str	r1, [r4, #0]
 80040e4:	e7ee      	b.n	80040c4 <_free_r+0x20>
 80040e6:	001a      	movs	r2, r3
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <_free_r+0x4e>
 80040ee:	42a3      	cmp	r3, r4
 80040f0:	d9f9      	bls.n	80040e6 <_free_r+0x42>
 80040f2:	6811      	ldr	r1, [r2, #0]
 80040f4:	1850      	adds	r0, r2, r1
 80040f6:	42a0      	cmp	r0, r4
 80040f8:	d10b      	bne.n	8004112 <_free_r+0x6e>
 80040fa:	6820      	ldr	r0, [r4, #0]
 80040fc:	1809      	adds	r1, r1, r0
 80040fe:	1850      	adds	r0, r2, r1
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	4283      	cmp	r3, r0
 8004104:	d1e0      	bne.n	80040c8 <_free_r+0x24>
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	1841      	adds	r1, r0, r1
 800410c:	6011      	str	r1, [r2, #0]
 800410e:	6053      	str	r3, [r2, #4]
 8004110:	e7da      	b.n	80040c8 <_free_r+0x24>
 8004112:	42a0      	cmp	r0, r4
 8004114:	d902      	bls.n	800411c <_free_r+0x78>
 8004116:	230c      	movs	r3, #12
 8004118:	602b      	str	r3, [r5, #0]
 800411a:	e7d5      	b.n	80040c8 <_free_r+0x24>
 800411c:	6821      	ldr	r1, [r4, #0]
 800411e:	1860      	adds	r0, r4, r1
 8004120:	4283      	cmp	r3, r0
 8004122:	d103      	bne.n	800412c <_free_r+0x88>
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	1841      	adds	r1, r0, r1
 800412a:	6021      	str	r1, [r4, #0]
 800412c:	6063      	str	r3, [r4, #4]
 800412e:	6054      	str	r4, [r2, #4]
 8004130:	e7ca      	b.n	80040c8 <_free_r+0x24>
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	20000194 	.word	0x20000194

08004138 <sbrk_aligned>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4e0f      	ldr	r6, [pc, #60]	; (8004178 <sbrk_aligned+0x40>)
 800413c:	000d      	movs	r5, r1
 800413e:	6831      	ldr	r1, [r6, #0]
 8004140:	0004      	movs	r4, r0
 8004142:	2900      	cmp	r1, #0
 8004144:	d102      	bne.n	800414c <sbrk_aligned+0x14>
 8004146:	f000 f8bf 	bl	80042c8 <_sbrk_r>
 800414a:	6030      	str	r0, [r6, #0]
 800414c:	0029      	movs	r1, r5
 800414e:	0020      	movs	r0, r4
 8004150:	f000 f8ba 	bl	80042c8 <_sbrk_r>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d00a      	beq.n	800416e <sbrk_aligned+0x36>
 8004158:	2303      	movs	r3, #3
 800415a:	1cc5      	adds	r5, r0, #3
 800415c:	439d      	bics	r5, r3
 800415e:	42a8      	cmp	r0, r5
 8004160:	d007      	beq.n	8004172 <sbrk_aligned+0x3a>
 8004162:	1a29      	subs	r1, r5, r0
 8004164:	0020      	movs	r0, r4
 8004166:	f000 f8af 	bl	80042c8 <_sbrk_r>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	d101      	bne.n	8004172 <sbrk_aligned+0x3a>
 800416e:	2501      	movs	r5, #1
 8004170:	426d      	negs	r5, r5
 8004172:	0028      	movs	r0, r5
 8004174:	bd70      	pop	{r4, r5, r6, pc}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	20000198 	.word	0x20000198

0800417c <_malloc_r>:
 800417c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800417e:	2203      	movs	r2, #3
 8004180:	1ccb      	adds	r3, r1, #3
 8004182:	4393      	bics	r3, r2
 8004184:	3308      	adds	r3, #8
 8004186:	0006      	movs	r6, r0
 8004188:	001f      	movs	r7, r3
 800418a:	2b0c      	cmp	r3, #12
 800418c:	d232      	bcs.n	80041f4 <_malloc_r+0x78>
 800418e:	270c      	movs	r7, #12
 8004190:	42b9      	cmp	r1, r7
 8004192:	d831      	bhi.n	80041f8 <_malloc_r+0x7c>
 8004194:	0030      	movs	r0, r6
 8004196:	f000 f8a9 	bl	80042ec <__malloc_lock>
 800419a:	4d32      	ldr	r5, [pc, #200]	; (8004264 <_malloc_r+0xe8>)
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	001c      	movs	r4, r3
 80041a0:	2c00      	cmp	r4, #0
 80041a2:	d12e      	bne.n	8004202 <_malloc_r+0x86>
 80041a4:	0039      	movs	r1, r7
 80041a6:	0030      	movs	r0, r6
 80041a8:	f7ff ffc6 	bl	8004138 <sbrk_aligned>
 80041ac:	0004      	movs	r4, r0
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	d11e      	bne.n	80041f0 <_malloc_r+0x74>
 80041b2:	682c      	ldr	r4, [r5, #0]
 80041b4:	0025      	movs	r5, r4
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	d14a      	bne.n	8004250 <_malloc_r+0xd4>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	0029      	movs	r1, r5
 80041be:	18e3      	adds	r3, r4, r3
 80041c0:	0030      	movs	r0, r6
 80041c2:	9301      	str	r3, [sp, #4]
 80041c4:	f000 f880 	bl	80042c8 <_sbrk_r>
 80041c8:	9b01      	ldr	r3, [sp, #4]
 80041ca:	4283      	cmp	r3, r0
 80041cc:	d143      	bne.n	8004256 <_malloc_r+0xda>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	3703      	adds	r7, #3
 80041d2:	1aff      	subs	r7, r7, r3
 80041d4:	2303      	movs	r3, #3
 80041d6:	439f      	bics	r7, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	2f0c      	cmp	r7, #12
 80041dc:	d200      	bcs.n	80041e0 <_malloc_r+0x64>
 80041de:	270c      	movs	r7, #12
 80041e0:	0039      	movs	r1, r7
 80041e2:	0030      	movs	r0, r6
 80041e4:	f7ff ffa8 	bl	8004138 <sbrk_aligned>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d034      	beq.n	8004256 <_malloc_r+0xda>
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	19df      	adds	r7, r3, r7
 80041f0:	6027      	str	r7, [r4, #0]
 80041f2:	e013      	b.n	800421c <_malloc_r+0xa0>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dacb      	bge.n	8004190 <_malloc_r+0x14>
 80041f8:	230c      	movs	r3, #12
 80041fa:	2500      	movs	r5, #0
 80041fc:	6033      	str	r3, [r6, #0]
 80041fe:	0028      	movs	r0, r5
 8004200:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	1bd1      	subs	r1, r2, r7
 8004206:	d420      	bmi.n	800424a <_malloc_r+0xce>
 8004208:	290b      	cmp	r1, #11
 800420a:	d917      	bls.n	800423c <_malloc_r+0xc0>
 800420c:	19e2      	adds	r2, r4, r7
 800420e:	6027      	str	r7, [r4, #0]
 8004210:	42a3      	cmp	r3, r4
 8004212:	d111      	bne.n	8004238 <_malloc_r+0xbc>
 8004214:	602a      	str	r2, [r5, #0]
 8004216:	6863      	ldr	r3, [r4, #4]
 8004218:	6011      	str	r1, [r2, #0]
 800421a:	6053      	str	r3, [r2, #4]
 800421c:	0030      	movs	r0, r6
 800421e:	0025      	movs	r5, r4
 8004220:	f000 f86c 	bl	80042fc <__malloc_unlock>
 8004224:	2207      	movs	r2, #7
 8004226:	350b      	adds	r5, #11
 8004228:	1d23      	adds	r3, r4, #4
 800422a:	4395      	bics	r5, r2
 800422c:	1aea      	subs	r2, r5, r3
 800422e:	429d      	cmp	r5, r3
 8004230:	d0e5      	beq.n	80041fe <_malloc_r+0x82>
 8004232:	1b5b      	subs	r3, r3, r5
 8004234:	50a3      	str	r3, [r4, r2]
 8004236:	e7e2      	b.n	80041fe <_malloc_r+0x82>
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	e7ec      	b.n	8004216 <_malloc_r+0x9a>
 800423c:	6862      	ldr	r2, [r4, #4]
 800423e:	42a3      	cmp	r3, r4
 8004240:	d101      	bne.n	8004246 <_malloc_r+0xca>
 8004242:	602a      	str	r2, [r5, #0]
 8004244:	e7ea      	b.n	800421c <_malloc_r+0xa0>
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	e7e8      	b.n	800421c <_malloc_r+0xa0>
 800424a:	0023      	movs	r3, r4
 800424c:	6864      	ldr	r4, [r4, #4]
 800424e:	e7a7      	b.n	80041a0 <_malloc_r+0x24>
 8004250:	002c      	movs	r4, r5
 8004252:	686d      	ldr	r5, [r5, #4]
 8004254:	e7af      	b.n	80041b6 <_malloc_r+0x3a>
 8004256:	230c      	movs	r3, #12
 8004258:	0030      	movs	r0, r6
 800425a:	6033      	str	r3, [r6, #0]
 800425c:	f000 f84e 	bl	80042fc <__malloc_unlock>
 8004260:	e7cd      	b.n	80041fe <_malloc_r+0x82>
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	20000194 	.word	0x20000194

08004268 <_realloc_r>:
 8004268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800426a:	0007      	movs	r7, r0
 800426c:	000e      	movs	r6, r1
 800426e:	0014      	movs	r4, r2
 8004270:	2900      	cmp	r1, #0
 8004272:	d105      	bne.n	8004280 <_realloc_r+0x18>
 8004274:	0011      	movs	r1, r2
 8004276:	f7ff ff81 	bl	800417c <_malloc_r>
 800427a:	0005      	movs	r5, r0
 800427c:	0028      	movs	r0, r5
 800427e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004280:	2a00      	cmp	r2, #0
 8004282:	d103      	bne.n	800428c <_realloc_r+0x24>
 8004284:	f7ff ff0e 	bl	80040a4 <_free_r>
 8004288:	0025      	movs	r5, r4
 800428a:	e7f7      	b.n	800427c <_realloc_r+0x14>
 800428c:	f000 f83e 	bl	800430c <_malloc_usable_size_r>
 8004290:	9001      	str	r0, [sp, #4]
 8004292:	4284      	cmp	r4, r0
 8004294:	d803      	bhi.n	800429e <_realloc_r+0x36>
 8004296:	0035      	movs	r5, r6
 8004298:	0843      	lsrs	r3, r0, #1
 800429a:	42a3      	cmp	r3, r4
 800429c:	d3ee      	bcc.n	800427c <_realloc_r+0x14>
 800429e:	0021      	movs	r1, r4
 80042a0:	0038      	movs	r0, r7
 80042a2:	f7ff ff6b 	bl	800417c <_malloc_r>
 80042a6:	1e05      	subs	r5, r0, #0
 80042a8:	d0e8      	beq.n	800427c <_realloc_r+0x14>
 80042aa:	9b01      	ldr	r3, [sp, #4]
 80042ac:	0022      	movs	r2, r4
 80042ae:	429c      	cmp	r4, r3
 80042b0:	d900      	bls.n	80042b4 <_realloc_r+0x4c>
 80042b2:	001a      	movs	r2, r3
 80042b4:	0031      	movs	r1, r6
 80042b6:	0028      	movs	r0, r5
 80042b8:	f7ff fed7 	bl	800406a <memcpy>
 80042bc:	0031      	movs	r1, r6
 80042be:	0038      	movs	r0, r7
 80042c0:	f7ff fef0 	bl	80040a4 <_free_r>
 80042c4:	e7da      	b.n	800427c <_realloc_r+0x14>
	...

080042c8 <_sbrk_r>:
 80042c8:	2300      	movs	r3, #0
 80042ca:	b570      	push	{r4, r5, r6, lr}
 80042cc:	4d06      	ldr	r5, [pc, #24]	; (80042e8 <_sbrk_r+0x20>)
 80042ce:	0004      	movs	r4, r0
 80042d0:	0008      	movs	r0, r1
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	f7fc fd28 	bl	8000d28 <_sbrk>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d103      	bne.n	80042e4 <_sbrk_r+0x1c>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d000      	beq.n	80042e4 <_sbrk_r+0x1c>
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	bd70      	pop	{r4, r5, r6, pc}
 80042e6:	46c0      	nop			; (mov r8, r8)
 80042e8:	2000019c 	.word	0x2000019c

080042ec <__malloc_lock>:
 80042ec:	b510      	push	{r4, lr}
 80042ee:	4802      	ldr	r0, [pc, #8]	; (80042f8 <__malloc_lock+0xc>)
 80042f0:	f000 f814 	bl	800431c <__retarget_lock_acquire_recursive>
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	200001a0 	.word	0x200001a0

080042fc <__malloc_unlock>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	4802      	ldr	r0, [pc, #8]	; (8004308 <__malloc_unlock+0xc>)
 8004300:	f000 f80d 	bl	800431e <__retarget_lock_release_recursive>
 8004304:	bd10      	pop	{r4, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	200001a0 	.word	0x200001a0

0800430c <_malloc_usable_size_r>:
 800430c:	1f0b      	subs	r3, r1, #4
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	1f18      	subs	r0, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	da01      	bge.n	800431a <_malloc_usable_size_r+0xe>
 8004316:	580b      	ldr	r3, [r1, r0]
 8004318:	18c0      	adds	r0, r0, r3
 800431a:	4770      	bx	lr

0800431c <__retarget_lock_acquire_recursive>:
 800431c:	4770      	bx	lr

0800431e <__retarget_lock_release_recursive>:
 800431e:	4770      	bx	lr

08004320 <_init>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr

0800432c <_fini>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr
